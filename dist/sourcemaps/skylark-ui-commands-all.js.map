{"version":3,"sources":["skylark-ui-commands-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","class2type","toString","type","forEach","toLowerCase","String","call","isEmptyObject","isFunction","value","isHtmlNode","Node","isNumber","isObject","isString","isWindow","window","isArray","object","constructor","Array","isArrayLike","isBoolean","isDefined","isDocument","nodeType","DOCUMENT_NODE","isEmpty","isNull","isNumeric","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","isSymbol","isObjectLike","objectToString","symbolTag","isUndefined","undefined","types","objects","filter","baseFindIndex","array","predicate","fromIndex","fromRight","index","baseIsNaN","flatten","result","item","j","push","baseIndexOf","compact","first","items","n","slice","inArray","indexOf","makeArray","offset","startWith","concat","merge","second","l","arr","fn","map","elements","callback","key","values","uniq","idx","INFINITY","MAX_INTEGER","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toFinite","toNumber","sign","other","valueOf","replace","isBinary","test","toInteger","remainder","numbers","eq","deepEq","hasOwnProperty","keysFunc","defaults","SymbolProto","Symbol","allKeys","keys","has","_mixin","target","source","deep","safe","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","_","a","b","aStack","bStack","className","areArrays","aCtor","bCtor","clone","src","checkCloneMethod","copy","each","undef","extend","arg","isEqual","includes","collection","guard","nativeMax","isMatch","attrs","removeItem","splice","fallback","prop","safeMixin","arrays","createClass","_constructor","_construct","init","props","parent","mixins","options","innerParent","ctor","Error","clss","unshift","superclass","cls","clsMixines","serialMixins","newCtor","xtor","Function","create","__proto__","__mixin__","mergeMixins","klassName","__mixins__","partial","proto","_super","noOverrided","overrides","superFn","tmp","overrided","ret","defineProperty","extendClass","inherit","f1","klass","parse","event","segs","join","Evented","on","events","selector","data","ctx","one","self","_hub","parsed","trigger","e","CustomEvent","eventName","listeners","len","reCompact","listener","listened","evtArr","_events","listenTo","listening","listeningTo","_listeningTo","listeningEvents","listeningEvent","listenToOnce","off","evts","liveEvents","unlistenTo","commands","Command","category","get","_options","checked","icon","label","_name","shortcut","shortCut","tooltip","execute","isEnabled","context","shouldShow","Manager","addAction","executeAction","removeAction","main"],"mappings":"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","file":"../skylark-ui-commands-all.js","sourcesContent":["define('skylark-langx/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx/skylark',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-ui-commands/commands',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"ui.commands\",{});\r\n});\ndefine('skylark-langx/types',[\r\n],function(){\r\n    var toString = {}.toString;\r\n    \r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function/string/element and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * isArrayLike([1, 2, 3])\r\n     * // => true\r\n     *\r\n     * isArrayLike(document.body.children)\r\n     * // => false\r\n     *\r\n     * isArrayLike('abc')\r\n     * // => true\r\n     *\r\n     * isArrayLike(Function)\r\n     * // => false\r\n     */    \r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * isBoolean(false)\r\n     * // => true\r\n     *\r\n     * isBoolean(null)\r\n     * // => false\r\n     */\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * isFunction(parseInt)\r\n     * // => true\r\n     *\r\n     * isFunction(/abc/)\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNull(value) {\r\n      return type(value) === \"null\";\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n    }\r\n\r\n    function isUndefined(value) {\r\n      return value === undefined\r\n    }\r\n\r\n    return {\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmpty : isEmptyObject,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNull: isNull,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isNumeric: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isSymbol : isSymbol,\r\n\r\n        isUndefined: isUndefined,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    };\r\n\r\n});\ndefine('skylark-langx/arrays',[\r\n\t\"./types\"\r\n],function(types,objects){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tisArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    return {\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        flatten: flatten,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        uniq : uniq\r\n\r\n    }\r\n});\ndefine('skylark-langx/numbers',[\r\n\t\"./types\"\r\n],function(types){\r\n\tvar isObject = types.isObject,\r\n\t\tisSymbol = types.isSymbol;\r\n\r\n\tvar INFINITY = 1 / 0,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\t    MAX_INTEGER = 1.7976931348623157e+308,\r\n\t    NAN = 0 / 0;\r\n\r\n\t/** Used to match leading and trailing whitespace. */\r\n\tvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n\t/** Used to detect bad signed hexadecimal string values. */\r\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n\t/** Used to detect binary string values. */\r\n\tvar reIsBinary = /^0b[01]+$/i;\r\n\r\n\t/** Used to detect octal string values. */\r\n\tvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n\t/** Used to detect unsigned integer values. */\r\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n\t/** Built-in method references without a dependency on `root`. */\r\n\tvar freeParseInt = parseInt;\r\n\r\n\t/**\r\n\t * Converts `value` to a finite number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.12.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted number.\r\n\t * @example\r\n\t *\r\n\t * _.toFinite(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toFinite(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toFinite(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toFinite('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toFinite(value) {\r\n\t  if (!value) {\r\n\t    return value === 0 ? value : 0;\r\n\t  }\r\n\t  value = toNumber(value);\r\n\t  if (value === INFINITY || value === -INFINITY) {\r\n\t    var sign = (value < 0 ? -1 : 1);\r\n\t    return sign * MAX_INTEGER;\r\n\t  }\r\n\t  return value === value ? value : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts `value` to an integer.\r\n\t *\r\n\t * **Note:** This method is loosely based on\r\n\t * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted integer.\r\n\t * @example\r\n\t *\r\n\t * _.toInteger(3.2);\r\n\t * // => 3\r\n\t *\r\n\t * _.toInteger(Number.MIN_VALUE);\r\n\t * // => 0\r\n\t *\r\n\t * _.toInteger(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toInteger('3.2');\r\n\t * // => 3\r\n\t */\r\n\tfunction toInteger(value) {\r\n\t  var result = toFinite(value),\r\n\t      remainder = result % 1;\r\n\r\n\t  return result === result ? (remainder ? result - remainder : result) : 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Converts `value` to a number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.0.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to process.\r\n\t * @returns {number} Returns the number.\r\n\t * @example\r\n\t *\r\n\t * _.toNumber(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toNumber(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toNumber(Infinity);\r\n\t * // => Infinity\r\n\t *\r\n\t * _.toNumber('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toNumber(value) {\r\n\t  if (typeof value == 'number') {\r\n\t    return value;\r\n\t  }\r\n\t  if (isSymbol(value)) {\r\n\t    return NAN;\r\n\t  }\r\n\t  if (isObject(value)) {\r\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n\t    value = isObject(other) ? (other + '') : other;\r\n\t  }\r\n\t  if (typeof value != 'string') {\r\n\t    return value === 0 ? value : +value;\r\n\t  }\r\n\t  value = value.replace(reTrim, '');\r\n\t  var isBinary = reIsBinary.test(value);\r\n\t  return (isBinary || reIsOctal.test(value))\r\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n\t    : (reIsBadHex.test(value) ? NAN : +value);\r\n\t}\r\n\r\n\treturn  {\r\n\t\ttoFinite : toFinite,\r\n\t\ttoNumber : toNumber,\r\n\t\ttoInteger : toInteger\r\n\t}\r\n});\ndefine('skylark-langx/objects',[\r\n    \"./_attach\",\r\n\t\"./types\",\r\n    \"./numbers\"\r\n],function(_attach,types,numbers){\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n\t\tisObject = types.isObject,\r\n\t\tisPlainObject = types.isPlainObject,\r\n\t\tisArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = numbers.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = _.keys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return {\r\n        allKeys: allKeys,\r\n\r\n        attach : _attach,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        isEqual: isEqual,   \r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        removeItem: removeItem,\r\n\r\n        result : result,\r\n        \r\n        safeMixin: safeMixin,\r\n\r\n        values: values\r\n    };\r\n\r\n\r\n\r\n});\ndefine('skylark-langx/klass',[\r\n    \"./arrays\",\r\n    \"./objects\",\r\n    \"./types\"\r\n],function(arrays,objects,types){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return createClass;\r\n});\ndefine('skylark-langx/Evented',[\r\n    \"./klass\",\r\n    \"./arrays\",\r\n    \"./objects\",\r\n    \"./types\"\r\n],function(klass,arrays,objects,types){\r\n    var slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isPlainObject = types.isPlainObject,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString,\r\n        isEmptyObject = types.isEmptyObject,\r\n        mixin = objects.mixin;\r\n\r\n    function parse(event) {\r\n        var segs = (\"\" + event).split(\".\");\r\n        return {\r\n            name: segs[0],\r\n            ns: segs.slice(1).join(\" \")\r\n        };\r\n    }\r\n\r\n    var Evented = klass({\r\n        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {\r\n            var self = this,\r\n                _hub = this._hub || (this._hub = {});\r\n\r\n            if (isPlainObject(events)) {\r\n                ctx = callback;\r\n                each(events, function(type, fn) {\r\n                    self.on(type, selector, data, fn, ctx, one);\r\n                });\r\n                return this;\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = selector;\r\n                selector = undefined;\r\n            }\r\n\r\n            if (isFunction(data)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = null;\r\n            }\r\n\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(event) {\r\n                var parsed = parse(event),\r\n                    name = parsed.name,\r\n                    ns = parsed.ns;\r\n\r\n                (_hub[name] || (_hub[name] = [])).push({\r\n                    fn: callback,\r\n                    selector: selector,\r\n                    data: data,\r\n                    ctx: ctx,\r\n                    ns : ns,\r\n                    one: one\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        one: function(events, selector, data, callback, ctx) {\r\n            return this.on(events, selector, data, callback, ctx, 1);\r\n        },\r\n\r\n        trigger: function(e /*,argument list*/ ) {\r\n            if (!this._hub) {\r\n                return this;\r\n            }\r\n\r\n            var self = this;\r\n\r\n            if (isString(e)) {\r\n                e = new CustomEvent(e);\r\n            }\r\n\r\n            Object.defineProperty(e,\"target\",{\r\n                value : this\r\n            });\r\n\r\n            var args = slice.call(arguments, 1);\r\n            if (isDefined(args)) {\r\n                args = [e].concat(args);\r\n            } else {\r\n                args = [e];\r\n            }\r\n            [e.type || e.name, \"all\"].forEach(function(eventName) {\r\n                var listeners = self._hub[eventName];\r\n                if (!listeners) {\r\n                    return;\r\n                }\r\n\r\n                var len = listeners.length,\r\n                    reCompact = false;\r\n\r\n                for (var i = 0; i < len; i++) {\r\n                    var listener = listeners[i];\r\n                    if (e.data) {\r\n                        if (listener.data) {\r\n                            e.data = mixin({}, listener.data, e.data);\r\n                        }\r\n                    } else {\r\n                        e.data = listener.data || null;\r\n                    }\r\n                    listener.fn.apply(listener.ctx, args);\r\n                    if (listener.one) {\r\n                        listeners[i] = null;\r\n                        reCompact = true;\r\n                    }\r\n                }\r\n\r\n                if (reCompact) {\r\n                    self._hub[eventName] = compact(listeners);\r\n                }\r\n\r\n            });\r\n            return this;\r\n        },\r\n\r\n        listened: function(event) {\r\n            var evtArr = ((this._hub || (this._events = {}))[event] || []);\r\n            return evtArr.length > 0;\r\n        },\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        off: function(events, callback) {\r\n            var _hub = this._hub || (this._hub = {});\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(event) {\r\n                var parsed = parse(event),\r\n                    name = parsed.name,\r\n                    ns = parsed.ns;\r\n\r\n                var evts = _hub[name];\r\n\r\n                if (evts) {\r\n                    var liveEvents = [];\r\n\r\n                    if (callback || ns) {\r\n                        for (var i = 0, len = evts.length; i < len; i++) {\r\n                            \r\n                            if (callback && evts[i].fn !== callback && evts[i].fn._ !== callback) {\r\n                                liveEvents.push(evts[i]);\r\n                                continue;\r\n                            } \r\n\r\n                            if (ns && (!evts[i].ns || evts[i].ns.indexOf(ns)!=0)) {\r\n                                liveEvents.push(evts[i]);\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (liveEvents.length) {\r\n                        _hub[name] = liveEvents;\r\n                    } else {\r\n                        delete _hub[name];\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return Evented;\r\n\r\n});\ndefine('skylark-ui-commands/Command',[\r\n\t\"skylark-langx/Evented\",\r\n\t\"./commands\"\r\n], function(Evented,commands){\r\n\r\n\tvar Command = Evented.inherit({\r\n\t\t\"klassName\" : \"Command\",\r\n\r\n\t\t\"category\" : {\r\n\t\t\t//desc : \"Group or category where the action belongs.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.category;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"checked\" : {\r\n\t\t\t//desc : \"Indicates whether client controls and menu items appear checked.\",\r\n\t\t\t//type : Boolean\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.checked;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"icon\" : {\r\n\t\t\t//desc : \"Represents the icon class of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.icon;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"label\" : {\r\n\t\t\t//desc : \"Represents the caption of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.label;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"name\" : {\r\n\t\t\t//desc : \"Represents the caption of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._name;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"shortcut\" : {\r\n\t\t\t//desc : \"Shortcut that triggers the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.shortCut;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"tooltip\" : {\r\n\t\t\t//desc : \"Stores the Help hint text.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.tooltip;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t    /**\r\n\t     * Executes the command. Additional arguments are passed to the executing function\r\n\t     *\r\n\t     * @return {$.Promise} a  promise that will be resolved when the command completes.\r\n\t     */\r\n\t\texecute: function(){\r\n\t\t\tthis.trigger(\"executed\");\r\n\t\t},\r\n\r\n        isEnabled: function(context) {\r\n        \tvar e = this.trigger(\"checkingDisabled\");\r\n        \tif (e && e.result) {\r\n        \t\treturn false;\r\n        \t} else {\r\n            \treturn true;\r\n        \t}\r\n        },\r\n\r\n        shouldShow: function(context) {\r\n        \tvar e = this.trigger(\"checkingHidden\");\r\n        \tif (e && e.result) {\r\n        \t\treturn false;\r\n        \t} else {\r\n            \treturn true;\r\n        \t}\r\n\t\t},\r\n\t\t\"init\":\t function(name,options){\r\n\t\t\tthis._name = name;\r\n\t\t\tthis._options = options || {};\r\n\t\t}\r\n\t\r\n\t});\r\n\t\r\n\treturn commands.Command = Command;\r\n});\r\n\r\n\r\n\ndefine('skylark-ui-commands/Manager',[\r\n\t\"skylark-langx/Evented\"\r\n], function(Evented){\r\n\r\n\tvar Manager = Evented.inherit({\r\n\t\t\"klassName\"\t\t:\t\"Manager\",\r\n\r\n\r\n\t\taddAction : function(category,name,fn,options) {\r\n\r\n\t\t},\r\n\r\n\t\texecuteAction : function() {\r\n\r\n\t\t},\r\n\r\n\t\tremoveAction : function(category,name) {\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn Manager;\r\n\r\n});\r\n\r\n\ndefine('skylark-ui-commands/main',[\r\n\t\"./commands\",\r\n\t\"./Command\",\r\n\t\"./Manager\"\r\n],function(commands){\r\n\treturn commands;\r\n});\ndefine('skylark-ui-commands', ['skylark-ui-commands/main'], function (main) { return main; });\n\n"]}