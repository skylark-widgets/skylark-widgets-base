{"version":3,"sources":["skylark-widgets-base.js"],"names":["define","skylark","attach","Evented","base","ActionManager","inherit","klassName","addAction","category","name","fn","options","executeAction","removeAction","objects","HashMap","ActiionManager","Action","text","tooltip","icon","shortcut","state","get","this","_state","checked","disabled","_construct","mixin","_init","execute","params","_execute","trigger","types","events","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","Widget","Plugin","_elmx","elm","isHtmlNode","_parse","overrided","_velm","_elm","_create","Object","defineProperty","value","addonCategoryOptions","addons","widgetCtor","constructor","categoryName","i","length","addonOption","isString","addonName","addonSetting","addonCtor","ctor","addon","parentElement","_startup","optionsAttr","data","options1","eval","template","Error","self","widgetClass","addClass","on","e","args","_refresh","updates","mapping","attributs","properties","styles","setting","_addons","settings","undefined","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","show","hide","focus","ex","blur","enable","set","disable","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","css","prop","throb","emit","type","createEvent","Emitter","prototype","call","target","position","before","after","append","detach","remove","meta","apply","arguments","addStatePropMethod","pluginName","register","widgetName","main"],"mappings":"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","file":"../skylark-widgets-base.js","sourcesContent":["define('skylark-widgets-base/base',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.base\",{});\r\n});\ndefine('skylark-widgets-base/ActionManager',[\r\n\t\"skylark-langx/Evented\",\r\n\t\"./base\"\r\n], function(Evented,base){\r\n\r\n\tvar ActionManager = Evented.inherit({\r\n\t\t\"klassName\"\t\t:\t\"Manager\",\r\n\r\n\r\n\t\taddAction : function(category,name,fn,options) {\r\n\r\n\t\t},\r\n\r\n\t\texecuteAction : function() {\r\n\r\n\t\t},\r\n\r\n\t\tremoveAction : function(category,name) {\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn base.ActionManager = ActionManager;\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-base/Action',[\r\n\t\"skylark-langx/objects\",\r\n\t\"skylark-langx/Evented\",\r\n\t\"skylark-data-collection/HashMap\",\r\n\t\"./base\",\r\n\t\"./ActionManager\"\r\n], function(objects,Evented, HashMap, base, ActiionManager){\r\n\r\n\tvar Action = Evented.inherit({\r\n\t\t\"klassName\" : \"Action\",\r\n\r\n\t\t\"name\"  : \"\",\r\n\r\n\t\t\"category\" : \"\",\r\n\r\n\t\t\"text\" : \"\",\r\n\r\n\t\t\"tooltip\" : \"\",\r\n\r\n\t\t\"icon\" : \"\",\r\n\r\n\t\t\"shortcut\" : \"\",\r\n\r\n\t\t\"state\"  : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn  this._state || (this._state = new HashMap({\r\n\t\t\t\t\tchecked : false,\r\n\t\t\t\t\tdisabled : false\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_construct : function(options) {\r\n\t\t\tif (options) {\r\n\t\t\t\tobjects.mixin(this,options);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_init : function() {\r\n\r\n\t\t},\r\n\r\n\t    /**\r\n\t     * Executes the command. Additional arguments are passed to the executing function\r\n\t     *\r\n\t     * @return {$.Promise} a  promise that will be resolved when the command completes.\r\n\t     */\r\n\t\texecute: function(params){\r\n\t\t\tif (this._execute) {\r\n\t\t\t\tthis._execute(params);\r\n\t\t\t}\r\n\t\t\tthis.trigger(\"executed\",{\r\n\t\t\t\tparams :params\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\treturn base.Action = Action;\r\n});\r\n\r\n\r\n\ndefine('skylark-widgets-base/Widget',[\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\"\r\n],function(skylark,types,objects,events,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _elmx : elmx,\r\n\r\n    _construct : function(elm,options) {\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (this._elm.parentElement) {\r\n          // The widget is already in document\r\n          this._startup();\r\n        }\r\n\r\n     },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this._elmx(template);\r\n        } else {\r\n          throw new Error(\"The template is not existed in options!\");\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n\ndefine('skylark-widgets-base/main',[\r\n\t\"./base\",\r\n\t\"./Action\",\r\n\t\"./ActionManager\",\r\n\t\"./Widget\"\r\n],function(base){\r\n\treturn base;\r\n});\ndefine('skylark-widgets-base', ['skylark-widgets-base/main'], function (main) { return main; });\n\n"]}