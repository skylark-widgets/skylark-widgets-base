{"version":3,"sources":["skylark-widgets-base.js"],"names":["define","skylark","attach","list","skins","register","skin","name","push","get","getList","slice","types","objects","events","Vector2","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","HashMap","base","SkinManager","Widget","Plugin","inherit","klassName","_construct","parent","elm","options","element","isHtmlNode","this","_parse","isString","tagName","overrided","_velm","_elm","_create","Object","defineProperty","value","state","visible","style","position","overflow","size","location","_mode","TOP_LEFT","_init","addonCategoryOptions","addons","widgetCtor","constructor","categoryName","i","length","addonOption","addonName","addonSetting","addonCtor","ctor","addon","optionsAttr","data","options1","eval","mixin","template","createElement","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","updateLocation","mode","undefined","TOP_RIGHT","top","y","bottom","BOTTOM_LEFT","left","x","right","updateSize","width","height","setVisibility","updateVisibility","display","updates","mapping","attributs","properties","styles","setting","_addons","category","settings","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","getSkin","show","hide","focus","ex","blur","enable","set","disable","removeClass","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","getAttr","setAttr","center","css","getStyle","setStyle","getData","setData","_parent","getParent","setParent","prop","getProp","setProp","throb","params","emit","type","createEvent","Emitter","prototype","call","update","target","before","after","append","detach","remove","preventDragEvents","setAltText","altText","document","alignItems","zIndex","border","borderRadius","color","Editor","theme","textColor","backgroundColor","barColor","borderColor","body","appendChild","text","createTextNode","destroyFunction","destroy","contains","removeChild","pointerEvents","onmousemove","event","clientX","clientY","onmouseout","setOnClick","callback","onclick","removeAllChildren","firstChild","setMode","updateInterface","updatePosition","attachTo","BOTTOM_RIGHT","meta","apply","arguments","addStatePropMethod","pluginName","widgetName","ImagePane","borderStyle","objectFit","setImage","source","src","TextMixin","_buildText","span","fitContent","allowWordBreak","setVerticalAlignment","CENTER","setAlignment","setFont","fontFamily","fontWeight","fontStyle","whiteSpace","wordBreak","setText","setTextBorder","textShadow","setTextSize","fontSize","setTextColor","setOverflow","ELLIPSIS","textOverflow","align","justifyContent","textAlign","LEFT","RIGHT","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","clientWidth","clientHeight","CLIP","TextPane","font","sepColor","panelColor","resizeTabColor","boxColor","iconColor","buttonColor","buttonOverColor","buttonLightColor","audioTrack","audioScrubber","audioProgress","main"],"mappings":"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","file":"../skylark-widgets-base.js","sourcesContent":["define('skylark-widgets-base/base',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.base\",{});\r\n});\ndefine('skylark-widgets-base/SkinManager',[\r\n],function(){\t\r\n\t\"use strict\";\r\n\r\n\tfunction SkinManager(){}\r\n\r\n\tvar list = [],\r\n\t\tskins = [];\r\n\r\n\t//Add skin to list\r\n\tfunction register(skin, name) {\r\n\t\tlist.push(name);\r\n\t\tskins[name] = skin;\r\n\t}\r\n\r\n\t//Get a skin instance\r\n\tfunction get(name) {\r\n\t\tif (!name) {\r\n\t\t\tname = list[0];\r\n\t\t}\r\n\r\n\t\treturn skins[name];\r\n\t};\r\n\r\n\tfunction getList() {\r\n\t\treturn list.slice();\r\n\t}\r\n\r\n\treturn {\r\n\t\tregister,\r\n\t\tget,\r\n\t\tgetList\r\n\t};\r\n});\ndefine('skylark-widgets-base/Widget',[\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-langx-numerics/Vector2\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\",\r\n  \"./SkinManager\"\r\n],function(skylark,types,objects,events,Vector2,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base,SkinManager){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _construct : function(parent,elm,options) {\r\n        if (parent && !(parent instanceof Widget || parent.element)) {\r\n           options = elm;\r\n           elm = parent;\r\n           parent = null;\r\n        }\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        if (types.isString(options)) {\r\n          options = {\r\n            tagName : options\r\n          };\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = this.elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        /** \r\n         * True if the element is visible.\r\n         *\r\n         * @attribute visible\r\n         * @type {Boolean}\r\n         */\r\n        this.visible = true;\r\n        \r\n\r\n        this.element.style.position = \"absolute\";\r\n        this.element.style.overflow = \"hidden\";\r\n\r\n        /**\r\n         * Size of this component in px.\r\n         *\r\n         * @attribute size\r\n         * @type {Vector2}\r\n         */\r\n        this.size = new Vector2(0, 0);\r\n        \r\n        /**\r\n         * Location of this component relatively to its parent in px.\r\n         *\r\n         * @attribute location\r\n         * @type {Vector2}\r\n         */\r\n        this.location = new Vector2(0, 0);\r\n\r\n        /**\r\n         * Locationing mode, indicates how to anchor the component.\r\n         *\r\n         * @attribute mode\r\n         * @type {Number}\r\n         */\r\n        this._mode = Widget.TOP_LEFT;\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (parent) {\r\n          this.parent(parent);\r\n        }\r\n        //if (this._elm.parentElement) {\r\n        //  // The widget is already in document\r\n        //  this._startup();\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this.elmx(template);\r\n        } else {\r\n          var tagName = this.options.tagName;\r\n          if (tagName) {\r\n            return this.elmx(noder.createElement(tagName,{\r\n              style : {\r\n                position : \"absolute\",\r\n                overflow : \"hidden\"\r\n              }\r\n            }))\r\n          } else {\r\n            throw new Error(\"The template or tagName is not existed in options!\");\r\n          }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Update the location of this widget.\r\n     * \r\n     * @method updateLocation\r\n     */\r\n    updateLocation : function(mode) {\r\n      if(mode !== undefined) {\r\n        this._mode = mode;\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.TOP_RIGHT) {\r\n        this._elm.style.top = this.location.y + \"px\";\r\n      } else {\r\n        this._elm.style.bottom = this.location.y + \"px\";\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.BOTTOM_LEFT) {\r\n        this._elm.style.left = this.location.x + \"px\";\r\n      } else {\r\n        this._elm.style.right = this.location.x + \"px\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the size of this widget.\r\n     * \r\n     * @method updateSize\r\n     */\r\n    updateSize : function(){\r\n      this._elm.style.width = this.size.x + \"px\";\r\n      this._elm.style.height = this.size.y + \"px\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Update visibility of this element.\r\n     *\r\n     * @method setVisibility\r\n     */\r\n    setVisibility : function(visible)   {\r\n      this.visible = visible;\r\n      this.updateVisibility();\r\n    },\r\n\r\n\r\n    /**\r\n     * Update the visibility of this widget.\r\n     *\r\n     * @method updateVisibility\r\n     */\r\n    updateVisibility : function() {\r\n      this._elm.style.display = this.visible ? \"block\" : \"none\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n\r\n    getSkin : function() {\r\n      return SkinManager.get();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n\r\n    /** \r\n     * Add a CSS class to the base DOM element of this Element.\r\n     * \r\n     * @method addClass\r\n     * @param {String} name Name of the class to be added.\r\n     */\r\n    addClass : function(name){\r\n      this._velm.addClass(name);\r\n      return this;\r\n    },\r\n\r\n    /** \r\n     * Remove a CSS class from the base DOM element of this Element.\r\n     * \r\n     * @method removeClass\r\n     * @param {String} name Name of the class to be removed.\r\n     */\r\n    removeClass: function(name) {\r\n      this._velm.removeClass(name);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getAttr : function(name) {\r\n      return this._velm.attr(name);\r\n    },\r\n\r\n    setAttr : function(name,value) {\r\n      this._velm.attr(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Calculate the location of the container to make it centered.\r\n     *\r\n     * Calculated relatively to its parent size.\r\n     * \r\n     * @method center\r\n     */\r\n    center : function() {\r\n      this.location.set((this.parent.size.x - this.size.x) / 2, (this.parent.size.y - this.size.y) / 2);\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getStyle : function(name) {\r\n      return this._velm.css(name);\r\n    },\r\n\r\n    setStyle : function(name,value) {\r\n      this._velm.css(name,value);\r\n      return this;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n\r\n    getData : function(name) {\r\n      return this._velm.data(name);\r\n    },\r\n\r\n    setData : function(name,value) {\r\n      this._velm.data(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    parent : function(parent) {\r\n      if (parent) {\r\n        this._parent = parent;\r\n        this.attach(parent._elm || parent.element);\r\n      } else {\r\n        return this._parent;\r\n      }\r\n    },\r\n\r\n    getParent : function() {\r\n      return this._parent;\r\n    },\r\n\r\n    setParent : function(parent) {\r\n      this._parent = parent;\r\n      this.attach(parent._elm || parent.element);\r\n      return this;\r\n    },\r\n\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getProp : function(name) {\r\n      return this._velm.prop(name);\r\n    },\r\n\r\n    setProp : function(name,value) {\r\n      this._velm.prop(name,value);\r\n      return this;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     * Update component appearance.\r\n     * \r\n     * Should be called after changing size or location.\r\n     *\r\n     * Uses the updateVisibility and if the element is visible calls the updateSize and updateLocation (in this order) methods to update the interface.\r\n     * \r\n     * @method update\r\n     */\r\n    update : function() {\r\n      this.updateVisibility();\r\n\r\n      if(this.visible) {\r\n        this.updateSize();\r\n        this.updateLocation();\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target.element || target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    },\r\n\r\n    preventDragEvents : function() {\r\n\r\n    },\r\n\r\n\r\n    element : {\r\n      get : function() {\r\n        return this._elm;\r\n      }\r\n    },\r\n\r\n    position : {\r\n      get : function() {\r\n        return this.location;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set alt text, that is displayed when the mouse is over the element. Returns the element created that is attached to the document body.\r\n     *\r\n     * @method setAltText\r\n     * @param {String} altText Alt text.\r\n     */\r\n    setAltText : function(altText)   {\r\n      var element = document.createElement(\"div\");\r\n      element.style.position = \"absolute\";\r\n      element.style.display = \"none\";\r\n      element.style.alignItems = \"center\";\r\n      element.style.zIndex = \"10000\";\r\n      element.style.border = \"3px solid\";\r\n      element.style.borderRadius = \"5px\";\r\n      element.style.color = Editor.theme.textColor;\r\n      element.style.backgroundColor = Editor.theme.barColor;\r\n      element.style.borderColor = Editor.theme.barColor;\r\n      element.style.height = \"fit-content\";\r\n      document.body.appendChild(element);\r\n\r\n      //Text\r\n      var text = document.createTextNode(altText);\r\n      element.appendChild(text);\r\n\r\n      //Destroy\r\n      var destroyFunction = this.destroy;\r\n      this.destroy = function()\r\n      { \r\n        destroyFunction.call(this);\r\n\r\n        if(document.body.contains(element))\r\n        {\r\n          document.body.removeChild(element);\r\n        }\r\n      };\r\n      \r\n      this._elm.style.pointerEvents = \"auto\"; \r\n\r\n      //Mouse mouse move event\r\n      this._elm.onmousemove = function(event) {\r\n        element.style.display = \"flex\";\r\n        element.style.left = (event.clientX + 8) + \"px\";\r\n        element.style.top = (event.clientY - 20) + \"px\";\r\n      };\r\n\r\n      //Mouse out event\r\n      this._elm.onmouseout = function()  {\r\n        element.style.display = \"none\";\r\n      };\r\n\r\n      return element;\r\n    },\r\n\r\n    /**\r\n     * Set method to be called on component click.\r\n     * \r\n     * @method setOnClick\r\n     * @param {Function} callback Function called when the component is clicked.\r\n     */\r\n    setOnClick : function(callback)  {\r\n      this._elm.onclick = callback;\r\n    },\r\n\r\n    /**\r\n     * Remove all DOM children from the element.\r\n     * \r\n     * @method removeAllChildren\r\n     */\r\n    removeAllChildren : function()   {\r\n      while(this._elm.firstChild) {\r\n        this._elm.removeChild(this._elm.firstChild);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set positioning mode.\r\n     * \r\n     * @method setMode\r\n     * @param {Number} setMode\r\n     */\r\n    setMode : function(mode) {\r\n      this._mode = mode;\r\n      this._elm.style.bottom = null;\r\n      this._elm.style.right = null;\r\n      this._elm.style.left = null;\r\n    }\r\n\r\n  });\r\n\r\n  Widget.prototype.updateInterface = Widget.prototype.update;\r\n  Widget.prototype.updatePosition = Widget.prototype.updateLocation;\r\n  Widget.prototype.attachTo = Widget.prototype.attach;\r\n\r\n  /**\r\n   * Top-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_LEFT = 0;\r\n\r\n  /**\r\n   * Top-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_RIGHT = 1;\r\n\r\n  /**\r\n   * Bottom-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_LEFT = 2;\r\n\r\n  /**\r\n   * Bottom-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_RIGHT = 3;\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n\ndefine('skylark-widgets-base/ImagePane',[\n  \"./base\",\n  \"./Widget\"\n],function(\n\tbase,\n\tWidget\n){\n\t\"use strict\";\n\n\t/**\n\t * DOM image element.\n\t * \n\t * @class ImagePane\n\t * @extends {Widget}\n\t * @param {Widget} parent Parent element.\n\t */\n\tvar ImagePane = Widget.inherit({\n\n\t\t_construct : function (parent) {\n\t\t\tWidget.call(this, parent, \"img\");\n\n\t\t\tthis._elm.style.borderStyle = \"none\";\n\t\t\tthis._elm.style.objectFit = \"contain\"; //cover | fill\n\t\t},\n\n\t\t/**\n\t\t * Set image from URL.\n\t\t * \n\t\t * @method setImage\n\t\t * @param {String} source Image URL.\n\t\t */\n\t\tsetImage : function(source)\t{\n\t\t\tthis._elm.src = source;\n\t\t}\n\t});\n\n\treturn base.ImagePane = ImagePane;\n});\ndefine('skylark-widgets-base/mixins/TextMixin',[\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildText : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\t//this._elm.style.color = skin.textColor;\r\n\t\t\t//this._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixin.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.LEFT\r\n\t\t *  - TextMixin.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixin.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixin.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.TOP\r\n\t\t *  - TextMixin.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixin.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixin.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});\ndefine('skylark-widgets-base/TextPane',[\r\n  \"./base\",\r\n  \"./Widget\",\r\n  \"./mixins/TextMixin\"\r\n],function(\r\n\tbase,\r\n\tWidget,\r\n\tTextMixin\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Element}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\r\n\tvar TextPane = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent,\"div\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t\t * \r\n\t\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t\t *\r\n\t\t\t\t * @attribute span\r\n\t\t\t\t * @type {DOM}\r\n\t\t\t \t \r\n\t\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\t\tthis.element.appendChild(this.span);\r\n\r\n\t\t\t\t//Text\r\n\t\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t\t**\r\n\t\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t\t *\r\n\t\t\t\t * @attribute fitContent\r\n\t\t\t\t * @type {Boolean}\r\n\t\t\t\t *\r\n\t\t\t\tthis.fitContent = false;\r\n\r\n\t\t\t\tthis.allowWordBreak(false);\r\n\t\t\t\tthis.setVerticalAlignment(Text.CENTER);\r\n\t\t\t\tthis.setAlignment(Text.CENTER);\r\n\t\t\t*/\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\r\n\t\t},\r\n\t\t...TextMixin\r\n\t});\r\n\t\r\n\tTextPane.CENTER = 0;\r\n\tTextPane.LEFT = 1;\r\n\tTextPane.RIGHT = 2;\r\n\tTextPane.TOP = 3;\r\n\tTextPane.BOTTOM = 4;\r\n\r\n\tTextPane.CLIP = 10;\r\n\tTextPane.ELLIPSIS = 11;\r\n\r\n\treturn base.TextPane = TextPane;\r\n});\ndefine('skylark-widgets-base/SkinDark',[\r\n\t\"./SkinManager\"\r\n],function(SkinManager){\t\r\n\t\"use strict\";\r\n\r\n\tfunction SkinDark() {\r\n\t\tthis.font = \"Arial\";\r\n\r\n\t\t//Color\r\n\t\tthis.barColor = \"#222222\";\r\n\t\tthis.sepColor = \"#292929\";\r\n\t\tthis.panelColor = \"#333333\";\r\n\t\tthis.resizeTabColor = \"#222222\";\r\n\t\tthis.boxColor = \"#444444\";\r\n\t\tthis.textColor = \"#FFFFFF\";\r\n\t\tthis.iconColor = \"#FFFFFF\";\r\n\r\n\t\t//Button\r\n\t\tthis.buttonColor = \"#222222\";\r\n\t\tthis.buttonOverColor = \"#555555\";\r\n\t\tthis.buttonLightColor = \"#333333\";\r\n\t\t\r\n\t\t//Audio player\r\n\t\tthis.audioTrack = \"#222222\";\r\n\t\tthis.audioScrubber = \"#FFFFFF\";\r\n\t\tthis.audioProgress = \"#555555\";\r\n\r\n\t\t//Body\r\n\t\tdocument.body.style.fontFamily = this.font;\r\n\t\tdocument.body.style.color = this.textColor;\r\n\t\tdocument.body.style.fontSize = \"12px\";\r\n\t}\r\n\r\n\r\n\tvar skin = new SkinDark();\r\n\r\n\tSkinManager.register(skin, \"dark\");\r\n\r\n\treturn skin;\r\n\r\n});\r\n\ndefine('skylark-widgets-base/main',[\r\n\t\"./base\",\r\n\t\"./Widget\",\r\n\t\"./ImagePane\",\r\n\t\"./TextPane\",\r\n\t\"./SkinManager\",\r\n\t\"./SkinDark\"\r\n],function(base){\r\n\treturn base;\r\n});\ndefine('skylark-widgets-base', ['skylark-widgets-base/main'], function (main) { return main; });\n\n"]}