{"version":3,"sources":["skylark-widgets-base.js"],"names":["define","skylark","attach","Acdefine","Evented","base","ActionManager","inherit","klassName","addAction","category","name","fn","options","executeAction","removeAction","ActiionManager","Action","get","this","_options","checked","icon","text","set","value","trigger","_setDisabled","_name","shortcut","shortCut","tooltip","disabled","execute","_execute","context","e","result","shouldShow","option","key","init","langx","browser","datax","eventer","noder","geom","elmx","$","plugins","Map","Widget","Plugin","_elmx","_construct","elm","isHtmlNode","_parse","overrided","_velm","_elm","_create","Object","defineProperty","state","_init","addonCategoryOptions","addons","widgetCtor","constructor","categoryName","i","length","addonOption","isString","addonName","addonCtor","addon","optionsAttr","data","options1","JSON","parse","mixin","template","Error","self","widgetClass","addClass","on","args","_refresh","_startup","updates","mapping","events","attributs","properties","styles","ctor","setting","_addons","settings","undefined","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","show","hide","focus","ex","blur","enable","disable","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","css","prop","throb","params","target","position","before","after","append","detach","remove","meta","apply","arguments","addStatePropMethod","prototype","pluginName","register","widgetName","main"],"mappings":";;;;;;;+zBAAAA,EAAA,6BACA,yBACA,SAAAC,GACA,OAAAA,EAAAC,OAAA,qBAEAC,UACA,wBACA,UACA,SAAAC,EAAAC,GAEA,IAAAC,EAAAF,EAAAG,SACAC,UAAA,UAGAC,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,KAIAC,cAAA,aAIAC,aAAA,SAAAL,EAAAC,OAMA,OAAAN,EAAAC,cAAAA,IAKAN,EAAA,qCAAA,cAEAA,EAAA,+BACA,wBACA,SACA,mBACA,SAAAI,EAAAC,EAAAW,GAEA,IAAAC,EAAAb,EAAAG,SACAC,UAAA,SAEAE,UAGAQ,IAAA,WACA,OAAAC,KAAAC,SAAAV,WAIAW,SAGAH,IAAA,WACA,OAAAC,KAAAC,SAAAC,UAIAC,MAGAJ,IAAA,WACA,OAAAC,KAAAC,SAAAE,OAIAC,MAGAL,IAAA,WACA,OAAAC,KAAAC,SAAAG,MAEAC,IAAA,SAAAC,GACAN,KAAAC,SAAAG,OAAAE,IACAN,KAAAC,SAAAG,KAAAE,EACAN,KAAAO,QAAA,oBACAP,KAAAQ,cACAR,KAAAQ,kBA3EAhB,MAGAO,IAAA,WACA,OAAAC,KAAAS,QAIAC,UAGAX,IAAA,WACA,OAAAC,KAAAC,SAAAU,WAIAC,SAGAb,IAAA,WACA,OAAAC,KAAAC,SAAAW,UAIAC,UAEAd,IAAA,WACA,OAAAC,KAAAC,SAAAY,UAGAR,IAAA,SAAAC,GACAN,KAAAC,SAAAY,WAAAP,IACAN,KAAAC,SAAAY,SAAAP,EACAN,KAAAQ,cACAR,KAAAQ,kBAYAM,QAAA,WACAd,KAAAe,UACAf,KAAAe,WAEAf,KAAAO,QAAA,aAGAM,SAAA,SAAAG,GACA,IAAAC,EAAAjB,KAAAO,QAAA,oBACA,OAAAU,IAAAA,EAAAC,QAOAC,WAAA,SAAAH,GACA,IAAAC,EAAAjB,KAAAO,QAAA,kBACA,OAAAU,IAAAA,EAAAC,QAOAE,OAAA,SAAAC,GACA,OAAArB,KAAAC,SAAAoB,IAGAC,KAAA,SAAA9B,EAAAE,GACAM,KAAAS,MAAAjB,EACAQ,KAAAC,SAAAP,SAKA,OAAAR,EAAAY,OAAAA,IAKAjB,EAAA,+BACA,wBACA,sBACA,uBACA,oBACA,uBACA,qBACA,oBACA,oBACA,qBACA,uBACA,8BACA,UACA,SAAAC,EAAAyC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9C,GAIA,IAAA+C,EAAAF,EAAAG,OAAA9C,SACAC,UAAA,SAEA8C,MAAAN,EAEAO,WAAA,SAAAC,EAAA3C,GACA6B,EAAAe,WAAAD,GACA3C,EAAAM,KAAAuC,OAAAF,EAAA3C,IAEAA,EAAA2C,EACAA,EAAA,MAEArC,KAAAwC,UAAAH,EAAA3C,GAEA2C,EAIArC,KAAAyC,MAAAZ,EAAA7B,KAAA0C,OAHA1C,KAAAyC,MAAAzC,KAAA2C,UACA3C,KAAA0C,KAAA1C,KAAAyC,MAAAJ,OAKAO,OAAAC,eAAA7C,KAAA,SACAM,MAAAN,KAAAN,QAAAoD,OAAA,IAAAd,IAIAhC,KAAA+C,QAEA,IAAAC,EAAAhD,KAAAN,QAAAuD,OACA,GAAAD,EAAA,CACA,IAAAE,EAAAlD,KAAAmD,YACAF,EAAAC,EAAAD,OACA,IAAA,IAAAG,KAAAJ,EACA,IAAA,IAAAK,EAAA,EAAAA,EAAAL,EAAAI,GAAAE,OAAAD,IAAA,CACA,IAAAE,EAAAP,EAAAI,GAAAC,GACA,GAAA9B,EAAAiC,SAAAD,GAAA,CACA,IAAAE,EAAAF,EACAG,EAAAT,EAAAG,GAAAK,GAEAzD,KAAA2D,MAAAD,OAmBAnB,OAAA,SAAAF,EAAA3C,GACA,IAAAkE,EAAAnC,EAAAoC,KAAAxB,EAAA,WACA,GAAAuB,EAAA,CACA,IAAAE,EAAAC,KAAAC,MAAA,IAAAJ,EAAA,KACAlE,EAAA6B,EAAA0C,MAAAH,EAAApE,GAEA,OAAAA,OASAiD,QAAA,WACA,IAAAuB,EAAAlE,KAAAN,QAAAwE,SACA,GAAAA,EACA,OAAAlE,KAAAmC,MAAA+B,GAEA,MAAA,IAAAC,MAAA,4CAUApB,MAAA,WACA,IAAAqB,EAAApE,KACAA,KAAAqE,aACArE,KAAAyC,MAAA6B,SAAAtE,KAAAqE,aAEArE,KAAA8C,MAAAyB,GAAA,UAAA,SAAAtD,EAAAuD,GACAJ,EAAAK,SAAAD,EAAAX,SAUAa,SAAA,aAUAD,SAAA,SAAAE,KA4BAC,SACAC,UAMAC,aAIAC,cAIAC,WAKArB,MAAA,SAAAsB,EAAAC,GACA,IAAA9B,EAAA6B,EAAA7B,aACAK,EAAAwB,EAAAxB,UAEAzD,KAAAmF,QAAAnF,KAAAiD,WACA,IAAA1D,EAAAS,KAAAmF,QAAA/B,GAAApD,KAAAmF,QAAA/B,OAEA,OADA7D,EAAAkE,GAAA,IAAAwB,EAAAjF,KAAAkF,GACAlF,MAGAiD,OAAA,SAAAG,EAAAgC,GACApF,KAAAmF,QAAAnF,KAAAiD,WACA,IAAA1D,EAAAS,KAAAmF,QAAA/B,GAAApD,KAAAmF,QAAA/B,OAEA,QAAAiC,GAAAD,EACA,OAAA7D,EAAA+D,MAAA/F,GAAA,MAEAgC,EAAA0C,MAAA1E,EAAA6F,IAWAG,OAAA,WACA,OAAAvF,KAAA0C,MAUA8C,aAAA,SAAAC,GACA,OAAA,MASAC,YAAA,WAGA,OADAC,SAAA,IAAAC,UACAD,UAUAE,KAAA,WACA7F,KAAAyC,MAAAoD,QASAC,KAAA,WACA9F,KAAAyC,MAAAqD,QASAC,MAAA,WACA,IACA/F,KAAAyC,MAAAsD,QACA,MAAAC,IAIA,OAAAhG,MASAiG,KAAA,WAGA,OAFAjG,KAAAyC,MAAAwD,OAEAjG,MAGAkG,OAAA,WAEA,OADAlG,KAAA8C,MAAAzC,IAAA,YAAA,GACAL,MAGAmG,QAAA,WAEA,OADAnG,KAAA8C,MAAAzC,IAAA,YAAA,GACAL,MAWAoG,KAAA,SAAA5G,EAAAc,GACA,MAAA8D,EAAApE,KAAAqC,EAAA+B,EAAAiC,MAAAjC,EAAAkC,YAEA,YAAA,IAAAhG,EACA8D,EAAAmC,MAAA/G,IAGA4E,EAAAmC,MAAA/G,GAAAc,EAEA8D,EAAAtB,MAAA/C,IAAA,aACAsC,EAAAmE,aAAA,SAAAhH,EAAAA,EAAA,QAAAA,EAAAc,GAGA8D,IAGAqC,KAAA,SAAAjH,EAAAc,GACA,IAAAoG,EAAA1G,KAAAyC,MACAkE,EAAAD,EAAAD,KAAAjH,EAAAc,GACA,OAAAqG,GAAAD,EAAA1G,KAAA2G,GAGAC,IAAA,SAAApH,EAAAc,GACA,IAAAoG,EAAA1G,KAAAyC,MACAkE,EAAAD,EAAAE,IAAApH,EAAAc,GACA,OAAAqG,GAAAD,EAAA1G,KAAA2G,GAGA9C,KAAA,SAAArE,EAAAc,GACA,IAAAoG,EAAA1G,KAAAyC,MACAkE,EAAAD,EAAA7C,KAAArE,EAAAc,GACA,OAAAqG,GAAAD,EAAA1G,KAAA2G,GAGAE,KAAA,SAAArH,EAAAc,GACA,IAAAoG,EAAA1G,KAAAyC,MACAkE,EAAAD,EAAAG,KAAArH,EAAAc,GACA,OAAAqG,GAAAD,EAAA1G,KAAA2G,GAGAG,MAAA,SAAAC,GACA,OAAApF,EAAAmF,MAAA9G,KAAA0C,KAAAqE,IAUAhI,OAAA,SAAAiI,EAAAC,GACA,IAAA5E,EAAA2E,EACAC,GAAA,SAAAA,EAEA,UAAAA,EACAtF,EAAAuF,OAAA7E,EAAArC,KAAA0C,MACA,SAAAuE,GACAtF,EAAAwF,MAAA9E,EAAArC,KAAA0C,MAJAf,EAAAyF,OAAA/E,EAAArC,KAAA0C,MAMA1C,KAAA0E,YASA2C,OAAA,WACArH,KAAAyC,MAAA6E,YAuDA,OAnDArF,EAAA7C,QAAA,SAAAmI,GACA,IAAAtC,EAAAlD,EAAAG,OAAA9C,QAAAoI,MAAAxH,KAAAyH,WAEA,SAAAC,EAAAlI,GACAyF,EAAA0C,UAAAnI,GAAA,SAAAc,GACA,YAAA+E,IAAA/E,GACAN,KAAA8C,MAAAzC,IAAAb,EAAAc,GACAN,MAEAA,KAAA8C,MAAA/C,IAAAP,IAIA,GAAA+H,EAAAzE,MACA,IAAA,IAAAtD,KAAA+H,EAAAzE,MACA4E,EAAAlI,GAOA,OAHA+H,EAAAK,YACA7F,EAAA8F,SAAA5C,EAAAsC,EAAAK,YAEA3C,GAGAhD,EAAA4F,SAAA,SAAA5C,EAAA6C,GACA,IAAAP,EAAAtC,EAAA0C,UACAC,EAAAE,GAAAP,EAAAK,WAEA,SAAAF,EAAAlI,GACAyF,EAAA0C,UAAAnI,GAAA,SAAAc,GACA,YAAA+E,IAAA/E,GACAN,KAAA8C,MAAAzC,IAAAb,EAAAc,GACAN,MAEAA,KAAA8C,MAAA/C,IAAAP,IAIA,GAAA+H,EAAAzE,MACA,IAAA,IAAAtD,KAAA+H,EAAAzE,MACA4E,EAAAlI,GAOA,OAHAoI,GACA7F,EAAA8F,SAAA5C,EAAA2C,GAEA3C,GAGA/F,EAAA+C,OAAAA,IAGApD,EAAA,6BACA,SACA,WACA,kBACA,YACA,SAAAK,GACA,OAAAA,IAEAL,EAAA,wBAAA,6BAAA,SAAAkJ,GAAA,OAAAA","file":"../skylark-widgets-base.js","sourcesContent":["define('skylark-widgets-base/base',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.base\",{});\r\n});\nAcdefine([\r\n\t\"skylark-langx/Evented\",\r\n\t\"./base\"\r\n], function(Evented,base){\r\n\r\n\tvar ActionManager = Evented.inherit({\r\n\t\t\"klassName\"\t\t:\t\"Manager\",\r\n\r\n\r\n\t\taddAction : function(category,name,fn,options) {\r\n\r\n\t\t},\r\n\r\n\t\texecuteAction : function() {\r\n\r\n\t\t},\r\n\r\n\t\tremoveAction : function(category,name) {\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn base.ActionManager = ActionManager;\r\n\r\n});\r\n\r\n\ndefine(\"skylark-widgets-base/ActionManager\", function(){});\n\ndefine('skylark-widgets-base/Action',[\r\n\t\"skylark-langx/Evented\",\r\n\t\"./base\",\r\n\t\"./ActionManager\"\r\n], function(Evented, base, ActiionManager){\r\n\r\n\tvar Action = Evented.inherit({\r\n\t\t\"klassName\" : \"Action\",\r\n\r\n\t\t\"category\" : {\r\n\t\t\t//desc : \"Group or category where the action belongs.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.category;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"checked\" : {\r\n\t\t\t//desc : \"Indicates whether client controls and menu items appear checked.\",\r\n\t\t\t//type : Boolean\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.checked;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"icon\" : {\r\n\t\t\t//desc : \"Represents the icon class of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.icon;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"text\" : {\r\n\t\t\t//desc : \"Represents the caption of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.text;\r\n\t\t\t},\r\n\t\t\tset : function(value) {\r\n\t\t\t\tif (this._options.text !== value) {\r\n\t\t\t\t\tthis._options.text = value;\r\n\t\t\t\t\tthis.trigger(\"checkingDisabled\");\r\n\t\t\t\t\tif (this._setDisabled) {\r\n\t\t\t\t\t\tthis._setDisabled();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"name\" : {\r\n\t\t\t//desc : \"Represents the caption of the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._name;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"shortcut\" : {\r\n\t\t\t//desc : \"Shortcut that triggers the action.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.shortCut;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"tooltip\" : {\r\n\t\t\t//desc : \"Stores the Help hint text.\",\r\n\t\t\t//type : String\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.tooltip;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"disabled\" : {\r\n\t\t\t//type : Boolean\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._options.disabled;\r\n\t\t\t},\r\n\r\n\t\t\tset : function(value) {\r\n\t\t\t\tif (this._options.disabled !== value) {\r\n\t\t\t\t\tthis._options.disabled = value;\r\n\t\t\t\t\tif (this._setDisabled) {\r\n\t\t\t\t\t\tthis._setDisabled();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t    /**\r\n\t     * Executes the command. Additional arguments are passed to the executing function\r\n\t     *\r\n\t     * @return {$.Promise} a  promise that will be resolved when the command completes.\r\n\t     */\r\n\t\texecute: function(){\r\n\t\t\tif (this._execute) {\r\n\t\t\t\tthis._execute();\r\n\t\t\t}\r\n\t\t\tthis.trigger(\"executed\");\r\n\t\t},\r\n\r\n        disabled: function(context) {\r\n        \tvar e = this.trigger(\"checkingDisabled\");\r\n        \tif (e && e.result) {\r\n        \t\treturn false;\r\n        \t} else {\r\n            \treturn true;\r\n        \t}\r\n        },\r\n\r\n        shouldShow: function(context) {\r\n        \tvar e = this.trigger(\"checkingHidden\");\r\n        \tif (e && e.result) {\r\n        \t\treturn false;\r\n        \t} else {\r\n            \treturn true;\r\n        \t}\r\n\t\t},\r\n\r\n\t\toption : function(key) {\r\n\t\t\treturn this._options[key];\r\n\t\t},\r\n\r\n\t\t\"init\":\t function(name,options){\r\n\t\t\tthis._name = name;\r\n\t\t\tthis._options = options || {};\r\n\t\t}\r\n\t\r\n\t});\r\n\t\r\n\treturn base.Action = Action;\r\n});\r\n\r\n\r\n\ndefine('skylark-widgets-base/Widget',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/Map\",\r\n  \"./base\"\r\n],function(skylark,langx,browser,datax,eventer,noder,geom,elmx,$,plugins,Map,base){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n\tvar Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _elmx : elmx,\r\n\r\n    _construct : function(elm,options) {\r\n        if (langx.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new Map()\r\n        });\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (langx.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonCtor = addons[categoryName][addonName];\r\n\r\n                  this.addon(addonCtor);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n\r\n\r\n        }\r\n\r\n\r\n     },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         options = langx.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this._elmx(template);\r\n        } else {\r\n          throw new Error(\"The template is not existed in options!\");\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return langx.clone(category || null);\r\n      } else {\r\n        langx.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return noder.throb(this._elm,params);\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n\treturn base.Widget = Widget;\r\n});\r\n\ndefine('skylark-widgets-base/main',[\r\n\t\"./base\",\r\n\t\"./Action\",\r\n\t\"./ActionManager\",\r\n\t\"./Widget\"\r\n],function(base){\r\n\treturn base;\r\n});\ndefine('skylark-widgets-base', ['skylark-widgets-base/main'], function (main) { return main; });\n\n"]}