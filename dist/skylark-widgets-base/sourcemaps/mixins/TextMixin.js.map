{"version":3,"sources":["mixins/TextMixin.js"],"names":["define","Vector2","Widget","setFont","fontFamily","fontWeight","fontStyle","this","span","style","undefined","allowWordBreak","value","whiteSpace","wordBreak","setText","text","data","setTextBorder","size","color","textShadow","setTextSize","_elm","fontSize","setTextColor","setOverflow","overflow","Text","ELLIPSIS","textOverflow","setAlignment","align","CENTER","justifyContent","textAlign","LEFT","RIGHT","setVerticalAlignment","alignItems","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","_updateVisibility","display","visible","_updateSize","fitContent","x","clientWidth","y","clientHeight","prototype","call"],"mappings":";;;;;;;AAAAA,QACC,gCACA,aACC,SACDC,EACAC,GAEA,aAuLA,OAlKCC,QAAU,SAASC,EAAYC,EAAYC,GAC1CC,KAAKC,KAAKC,MAAML,WAAaA,OAEXM,IAAfL,IACFE,KAAKC,KAAKC,MAAMJ,WAAaA,QAGbK,IAAdJ,IACFC,KAAKC,KAAKC,MAAMH,UAAYA,IAU9BK,eAAiB,SAASC,IACZ,IAAVA,GACFL,KAAKC,KAAKC,MAAMI,WAAa,SAC7BN,KAAKC,KAAKC,MAAMK,UAAY,eAE5BP,KAAKC,KAAKC,MAAMI,WAAa,MAC7BN,KAAKC,KAAKC,MAAMK,UAAY,WAU9BC,QAAU,SAASC,GAClBT,KAAKS,KAAKC,KAAOD,GAUlBE,cAAgB,SAASC,EAAMC,GAC9Bb,KAAKC,KAAKC,MAAMY,WAAa,IAAMF,EAAO,QAAUC,EAAQ,OAASD,EAAO,MAAQC,EAAQ,KAAOD,EAAO,QAAUC,EAAQ,QAAUD,EAAO,MAAQC,GAStJE,YAAc,SAASH,GACtBZ,KAAKgB,KAAKd,MAAMe,SAAWL,EAAO,MASnCM,aAAe,SAASL,GACvBb,KAAKC,KAAKC,MAAMW,MAAQA,GASzBM,YAAc,SAASC,GACnBA,IAAaC,KAAKC,UACpBtB,KAAKC,KAAKC,MAAMI,WAAa,SAC7BN,KAAKC,KAAKC,MAAMqB,aAAe,aAE/BvB,KAAKC,KAAKC,MAAMI,WAAa,MAC7BN,KAAKC,KAAKC,MAAMqB,aAAe,SAajCC,aAAe,SAASC,GACpBA,IAAUJ,KAAKK,QACjB1B,KAAKgB,KAAKd,MAAMyB,eAAiB,SACjC3B,KAAKgB,KAAKd,MAAM0B,UAAY,UACnBH,IAAUJ,KAAKQ,MACxB7B,KAAKgB,KAAKd,MAAMyB,eAAiB,aACjC3B,KAAKgB,KAAKd,MAAM0B,UAAY,QACnBH,IAAUJ,KAAKS,QACxB9B,KAAKgB,KAAKd,MAAMyB,eAAiB,WACjC3B,KAAKgB,KAAKd,MAAM0B,UAAY,UAa9BG,qBAAuB,SAASN,GAC5BA,IAAUJ,KAAKK,OACjB1B,KAAKgB,KAAKd,MAAM8B,WAAa,SACpBP,IAAUJ,KAAKY,IACvBjC,KAAKgB,KAAKd,MAAM8B,WAAa,aACrBP,IAAUJ,KAAKa,SACxBlC,KAAKgB,KAAKd,MAAM8B,WAAa,aAU/BG,QAAU,WACR,OAAO,IAAIzC,EAAQM,KAAKC,KAAKmC,YAAapC,KAAKC,KAAKoC,eAStDC,UAAY,SAASC,GACpBvC,KAAKC,KAAKC,MAAMqC,OAASA,EAAS,MAGnCC,kBAAoB,WACnBxC,KAAKgB,KAAKd,MAAMuC,QAAUzC,KAAK0C,QAAU,OAAS,QAGnDC,YAAc,WACV3C,KAAK4C,aACP5C,KAAKY,KAAKiC,EAAI7C,KAAKC,KAAK6C,YACxB9C,KAAKY,KAAKmC,EAAI/C,KAAKC,KAAK+C,cAGzBrD,EAAOsD,UAAUN,YAAYO,KAAKlD","file":"../../mixins/TextMixin.js","sourcesContent":["define([\r\n\t\"skylark-langx-numbers/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === Text.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.LEFT\r\n\t\t *  - Text.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === Text.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === Text.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - Text.CENTER\r\n\t\t *  - Text.TOP\r\n\t\t *  - Text.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === Text.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === Text.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === Text.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});"]}