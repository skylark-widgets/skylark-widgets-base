{"version":3,"sources":["mixins/TextMixin.js"],"names":["define","Vector2","Widget","_buildTextSpan","skin","this","getSkin","_elm","style","pointerEvents","color","textColor","display","span","document","createElement","overflow","appendChild","text","createTextNode","fitContent","allowWordBreak","setVerticalAlignment","TextMixinCENTER","setAlignment","setFont","fontFamily","fontWeight","fontStyle","undefined","value","whiteSpace","wordBreak","setText","data","setTextBorder","size","textShadow","setTextSize","fontSize","setTextColor","setOverflow","TextMixinELLIPSIS","textOverflow","align","justifyContent","textAlign","TextMixinLEFT","TextMixinRIGHT","alignItems","TextMixinTOP","TextMixinBOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","_updateVisibility","visible","_updateSize","x","clientWidth","y","clientHeight","prototype","call","CENTER","LEFT","RIGHT","TOP","BOTTOM","CLIP","ELLIPSIS"],"mappings":"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","file":"../../mixins/TextMixin.js","sourcesContent":["define([\r\n\t\"skylark-langx-numbers/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildTextSpan : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixinCENTER);\r\n\t\t\tthis.setAlignment(TextMixinCENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixinELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixinCENTER\r\n\t\t *  - TextMixinLEFT\r\n\t\t *  - TextMixinRIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixinCENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixinLEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixinRIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixinCENTER\r\n\t\t *  - TextMixinTOP\r\n\t\t *  - TextMixinBOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixinCENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixinTOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixinBOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\t_updateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\t_updateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype._updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});"]}