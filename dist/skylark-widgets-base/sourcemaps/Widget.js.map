{"version":3,"sources":["Widget.js"],"names":["define","skylark","types","objects","events","Vector2","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","HashMap","base","SkinManager","Widget","Plugin","inherit","klassName","_construct","parent","elm","options","element","isHtmlNode","this","_parse","isString","tagName","overrided","_velm","_elm","_create","Object","defineProperty","value","state","visible","style","position","overflow","size","location","_mode","TOP_LEFT","_init","addonCategoryOptions","addons","constructor","categoryName","i","length","addonOption","addonName","addonSetting","addonCtor","ctor","addon","optionsAttr","data","options1","eval","mixin","template","createElement","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","updateLocation","mode","undefined","TOP_RIGHT","top","y","bottom","BOTTOM_LEFT","left","x","right","updateSize","width","height","setVisibility","updateVisibility","display","updates","mapping","attributs","properties","styles","setting","_addons","settings","category","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","getSkin","get","show","hide","focus","ex","blur","enable","set","disable","name","removeClass","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","getAttr","setAttr","center","css","getStyle","setStyle","getData","setData","_parent","attach","getParent","setParent","prop","getProp","setProp","throb","params","emit","type","createEvent","Emitter","prototype","call","update","target","before","after","append","detach","remove","preventDragEvents","setAltText","altText","document","alignItems","zIndex","border","borderRadius","color","Editor","theme","textColor","backgroundColor","barColor","borderColor","body","appendChild","text","createTextNode","destroyFunction","destroy","contains","removeChild","pointerEvents","onmousemove","event","clientX","clientY","onmouseout","setOnClick","callback","onclick","removeAllChildren","firstChild","setMode","updateInterface","updatePosition","attachTo","BOTTOM_RIGHT","meta","apply","arguments","addStatePropMethod","pluginName","register","widgetName"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-langx-numerics/Vector2\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\",\r\n  \"./skins/SkinManager\"\r\n],function(skylark,types,objects,events,Vector2,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base,SkinManager){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _construct : function(parent,elm,options) {\r\n        if (parent && !(parent instanceof Widget || parent.element)) {\r\n           options = elm;\r\n           elm = parent;\r\n           parent = null;\r\n        }\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        if (types.isString(options)) {\r\n          options = {\r\n            tagName : options\r\n          };\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = this.elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        /** \r\n         * True if the element is visible.\r\n         *\r\n         * @attribute visible\r\n         * @type {Boolean}\r\n         */\r\n        this.visible = true;\r\n        \r\n\r\n        this.element.style.position = \"absolute\";\r\n        this.element.style.overflow = \"hidden\";\r\n\r\n        /**\r\n         * Size of this component in px.\r\n         *\r\n         * @attribute size\r\n         * @type {Vector2}\r\n         */\r\n        this.size = new Vector2(0, 0);\r\n        \r\n        /**\r\n         * Location of this component relatively to its parent in px.\r\n         *\r\n         * @attribute location\r\n         * @type {Vector2}\r\n         */\r\n        this.location = new Vector2(0, 0);\r\n\r\n        /**\r\n         * Locationing mode, indicates how to anchor the component.\r\n         *\r\n         * @attribute mode\r\n         * @type {Number}\r\n         */\r\n        this._mode = Widget.TOP_LEFT;\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (parent) {\r\n          this.parent(parent);\r\n        }\r\n        //if (this._elm.parentElement) {\r\n        //  // The widget is already in document\r\n        //  this._startup();\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this.elmx(template);\r\n        } else {\r\n          var tagName = this.options.tagName;\r\n          if (tagName) {\r\n            return this.elmx(noder.createElement(tagName,{\r\n              style : {\r\n                position : \"absolute\",\r\n                overflow : \"hidden\"\r\n              }\r\n            }))\r\n          } else {\r\n            throw new Error(\"The template or tagName is not existed in options!\");\r\n          }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Update the location of this widget.\r\n     * \r\n     * @method updateLocation\r\n     */\r\n    updateLocation : function(mode) {\r\n      if(mode !== undefined) {\r\n        this._mode = mode;\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.TOP_RIGHT) {\r\n        this._elm.style.top = this.location.y + \"px\";\r\n      } else {\r\n        this._elm.style.bottom = this.location.y + \"px\";\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.BOTTOM_LEFT) {\r\n        this._elm.style.left = this.location.x + \"px\";\r\n      } else {\r\n        this._elm.style.right = this.location.x + \"px\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the size of this widget.\r\n     * \r\n     * @method updateSize\r\n     */\r\n    updateSize : function(){\r\n      this._elm.style.width = this.size.x + \"px\";\r\n      this._elm.style.height = this.size.y + \"px\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Update visibility of this element.\r\n     *\r\n     * @method setVisibility\r\n     */\r\n    setVisibility : function(visible)   {\r\n      this.visible = visible;\r\n      this.updateVisibility();\r\n    },\r\n\r\n\r\n    /**\r\n     * Update the visibility of this widget.\r\n     *\r\n     * @method updateVisibility\r\n     */\r\n    updateVisibility : function() {\r\n      this._elm.style.display = this.visible ? \"block\" : \"none\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n\r\n    getSkin : function() {\r\n      return SkinManager.get();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n\r\n    /** \r\n     * Add a CSS class to the base DOM element of this Element.\r\n     * \r\n     * @method addClass\r\n     * @param {String} name Name of the class to be added.\r\n     */\r\n    addClass : function(name){\r\n      this._velm.addClass(name);\r\n      return this;\r\n    },\r\n\r\n    /** \r\n     * Remove a CSS class from the base DOM element of this Element.\r\n     * \r\n     * @method removeClass\r\n     * @param {String} name Name of the class to be removed.\r\n     */\r\n    removeClass: function(name) {\r\n      this._velm.removeClass(name);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getAttr : function(name) {\r\n      return this._velm.attr(name);\r\n    },\r\n\r\n    setAttr : function(name,value) {\r\n      this._velm.attr(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Calculate the location of the container to make it centered.\r\n     *\r\n     * Calculated relatively to its parent size.\r\n     * \r\n     * @method center\r\n     */\r\n    center : function() {\r\n      this.location.set((this.parent.size.x - this.size.x) / 2, (this.parent.size.y - this.size.y) / 2);\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getStyle : function(name) {\r\n      return this._velm.css(name);\r\n    },\r\n\r\n    setStyle : function(name,value) {\r\n      this._velm.css(name,value);\r\n      return this;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n\r\n    getData : function(name) {\r\n      return this._velm.data(name);\r\n    },\r\n\r\n    setData : function(name,value) {\r\n      this._velm.data(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    parent : function(parent) {\r\n      if (parent) {\r\n        this._parent = parent;\r\n        this.attach(parent._elm || parent.element);\r\n      } else {\r\n        return this._parent;\r\n      }\r\n    },\r\n\r\n    getParent : function() {\r\n      return this._parent;\r\n    },\r\n\r\n    setParent : function(parent) {\r\n      this._parent = parent;\r\n      this.attach(parent._elm || parent.element);\r\n      return this;\r\n    },\r\n\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getProp : function(name) {\r\n      return this._velm.prop(name);\r\n    },\r\n\r\n    setProp : function(name,value) {\r\n      this._velm.prop(name,value);\r\n      return this;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     * Update component appearance.\r\n     * \r\n     * Should be called after changing size or location.\r\n     *\r\n     * Uses the updateVisibility and if the element is visible calls the updateSize and updateLocation (in this order) methods to update the interface.\r\n     * \r\n     * @method update\r\n     */\r\n    update : function() {\r\n      this.updateVisibility();\r\n\r\n      if(this.visible) {\r\n        this.updateSize();\r\n        this.updateLocation();\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target.element || target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    },\r\n\r\n    preventDragEvents : function() {\r\n\r\n    },\r\n\r\n\r\n    element : {\r\n      get : function() {\r\n        return this._elm;\r\n      }\r\n    },\r\n\r\n    position : {\r\n      get : function() {\r\n        return this.location;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set alt text, that is displayed when the mouse is over the element. Returns the element created that is attached to the document body.\r\n     *\r\n     * @method setAltText\r\n     * @param {String} altText Alt text.\r\n     */\r\n    setAltText : function(altText)   {\r\n      var element = document.createElement(\"div\");\r\n      element.style.position = \"absolute\";\r\n      element.style.display = \"none\";\r\n      element.style.alignItems = \"center\";\r\n      element.style.zIndex = \"10000\";\r\n      element.style.border = \"3px solid\";\r\n      element.style.borderRadius = \"5px\";\r\n      element.style.color = Editor.theme.textColor;\r\n      element.style.backgroundColor = Editor.theme.barColor;\r\n      element.style.borderColor = Editor.theme.barColor;\r\n      element.style.height = \"fit-content\";\r\n      document.body.appendChild(element);\r\n\r\n      //Text\r\n      var text = document.createTextNode(altText);\r\n      element.appendChild(text);\r\n\r\n      //Destroy\r\n      var destroyFunction = this.destroy;\r\n      this.destroy = function()\r\n      { \r\n        destroyFunction.call(this);\r\n\r\n        if(document.body.contains(element))\r\n        {\r\n          document.body.removeChild(element);\r\n        }\r\n      };\r\n      \r\n      this._elm.style.pointerEvents = \"auto\"; \r\n\r\n      //Mouse mouse move event\r\n      this._elm.onmousemove = function(event) {\r\n        element.style.display = \"flex\";\r\n        element.style.left = (event.clientX + 8) + \"px\";\r\n        element.style.top = (event.clientY - 20) + \"px\";\r\n      };\r\n\r\n      //Mouse out event\r\n      this._elm.onmouseout = function()  {\r\n        element.style.display = \"none\";\r\n      };\r\n\r\n      return element;\r\n    },\r\n\r\n    /**\r\n     * Set method to be called on component click.\r\n     * \r\n     * @method setOnClick\r\n     * @param {Function} callback Function called when the component is clicked.\r\n     */\r\n    setOnClick : function(callback)  {\r\n      this._elm.onclick = callback;\r\n    },\r\n\r\n    /**\r\n     * Remove all DOM children from the element.\r\n     * \r\n     * @method removeAllChildren\r\n     */\r\n    removeAllChildren : function()   {\r\n      while(this._elm.firstChild) {\r\n        this._elm.removeChild(this._elm.firstChild);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set positioning mode.\r\n     * \r\n     * @method setMode\r\n     * @param {Number} setMode\r\n     */\r\n    setMode : function(mode) {\r\n      this._mode = mode;\r\n      this._elm.style.bottom = null;\r\n      this._elm.style.right = null;\r\n      this._elm.style.left = null;\r\n    }\r\n\r\n  });\r\n\r\n  Widget.prototype.updateInterface = Widget.prototype.update;\r\n  Widget.prototype.updatePosition = Widget.prototype.updateLocation;\r\n  Widget.prototype.attachTo = Widget.prototype.attach;\r\n\r\n  /**\r\n   * Top-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_LEFT = 0;\r\n\r\n  /**\r\n   * Top-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_RIGHT = 1;\r\n\r\n  /**\r\n   * Bottom-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_LEFT = 2;\r\n\r\n  /**\r\n   * Bottom-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_RIGHT = 3;\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n"]}