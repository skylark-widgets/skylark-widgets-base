{"version":3,"sources":["Widget.js"],"names":["define","skylark","types","objects","events","Vector2","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","HashMap","base","SkinManager","Widget","Plugin","inherit","klassName","_construct","parent","elm","options","isHtmlNode","this","_parse","isString","tagName","overrided","_velm","_elm","_create","Object","defineProperty","value","state","visible","size","position","_mode","TOP_LEFT","_init","addonCategoryOptions","addons","constructor","categoryName","i","length","addonOption","addonName","addonSetting","addonCtor","ctor","addon","optionsAttr","data","options1","eval","mixin","template","createElement","style","overflow","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","_updatePosition","mode","undefined","TOP_RIGHT","top","y","bottom","BOTTOM_LEFT","left","x","right","_updateSize","width","height","_updateVisibility","display","updates","mapping","attributs","properties","styles","setting","_addons","settings","category","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","getSkin","get","show","hide","focus","ex","blur","enable","set","disable","name","removeClass","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","center","css","_parent","attach","prop","throb","params","emit","type","createEvent","Emitter","prototype","call","update","target","before","after","append","detach","remove","BOTTOM_RIGHT","meta","apply","arguments","addStatePropMethod","pluginName","register","widgetName"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-langx-numbers/Vector2\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\",\r\n  \"./SkinManager\"\r\n],function(skylark,types,objects,events,Vector2,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base,SkinManager){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _construct : function(parent,elm,options) {\r\n        if (parent && !(parent instanceof Widget)) {\r\n           options = elm;\r\n           elm = parent;\r\n           parent = null;\r\n        }\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        if (types.isString(options)) {\r\n          options = {\r\n            tagName : options\r\n          };\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = this.elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        /** \r\n         * True if the element is visible.\r\n         *\r\n         * @attribute visible\r\n         * @type {Boolean}\r\n         */\r\n        this.visible = true;\r\n        \r\n        /**\r\n         * Size of this component in px.\r\n         *\r\n         * @attribute size\r\n         * @type {Vector2}\r\n         */\r\n        this.size = new Vector2(0, 0);\r\n        \r\n        /**\r\n         * Position of this component relatively to its parent in px.\r\n         *\r\n         * @attribute position\r\n         * @type {Vector2}\r\n         */\r\n        this.position = new Vector2(0, 0);\r\n\r\n        /**\r\n         * Positioning mode, indicates how to anchor the component.\r\n         *\r\n         * @attribute mode\r\n         * @type {Number}\r\n         */\r\n        this._mode = Widget.TOP_LEFT;\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (parent) {\r\n          this.parent(parent);\r\n        }\r\n        //if (this._elm.parentElement) {\r\n        //  // The widget is already in document\r\n        //  this._startup();\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this.elmx(template);\r\n        } else {\r\n          var tagName = this.options.tagName;\r\n          if (tagName) {\r\n            return this.elmx(noder.createElement(tagName,{\r\n              style : {\r\n                position : \"absolute\",\r\n                overflow : \"hidden\"\r\n              }\r\n            }))\r\n          } else {\r\n            throw new Error(\"The template or tagName is not existed in options!\");\r\n          }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Update the position of this widget.\r\n     * \r\n     * @method updatePosition\r\n     */\r\n    _updatePosition : function(mode) {\r\n      if(mode !== undefined) {\r\n        this._mode = mode;\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.TOP_RIGHT) {\r\n        this._elm.style.top = this.position.y + \"px\";\r\n      } else {\r\n        this._elm.style.bottom = this.position.y + \"px\";\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.BOTTOM_LEFT) {\r\n        this._elm.style.left = this.position.x + \"px\";\r\n      } else {\r\n        this._elm.style.right = this.position.x + \"px\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the size of this widget.\r\n     * \r\n     * @method updateSize\r\n     */\r\n    _updateSize : function(){\r\n      this._elm.style.width = this.size.x + \"px\";\r\n      this._elm.style.height = this.size.y + \"px\";\r\n    },\r\n\r\n    /**\r\n     * Update the visibility of this widget.\r\n     *\r\n     * @method updateVisibility\r\n     */\r\n    _updateVisibility : function() {\r\n      this._elm.style.display = this.visible ? \"block\" : \"none\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n\r\n    getSkin : function() {\r\n      return SkinManager.get();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n\r\n    /** \r\n     * Add a CSS class to the base DOM element of this Element.\r\n     * \r\n     * @method addClass\r\n     * @param {String} name Name of the class to be added.\r\n     */\r\n    addClass : function(name){\r\n      this._velm.addClass(name);\r\n      return this;\r\n    },\r\n\r\n    /** \r\n     * Remove a CSS class from the base DOM element of this Element.\r\n     * \r\n     * @method removeClass\r\n     * @param {String} name Name of the class to be removed.\r\n     */\r\n    removeClass: function(name) {\r\n      this._velm.removeClass(name);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    /**\r\n     * Calculate the position of the container to make it centered.\r\n     *\r\n     * Calculated relatively to its parent size.\r\n     * \r\n     * @method center\r\n     */\r\n    center : function() {\r\n      this.position.set((this.parent.size.x - this.size.x) / 2, (this.parent.size.y - this.size.y) / 2);\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    parent : function(parent) {\r\n      if (parent) {\r\n        this._parent = parent;\r\n        this.attach(parent._elm);\r\n      } else {\r\n        return this._parent;\r\n      }\r\n    },\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     * Update component appearance.\r\n     * \r\n     * Should be called after changing size or position.\r\n     *\r\n     * Uses the updateVisibility and if the element is visible calls the updateSize and updatePosition (in this order) methods to update the interface.\r\n     * \r\n     * @method update\r\n     */\r\n    update : function() {\r\n      this._updateVisibility();\r\n\r\n      if(this.visible) {\r\n        this._updateSize();\r\n        this._updatePosition();\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Top-left positioning.\r\n   *\r\n   * @static\r\n   * @attribute TOP_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_LEFT = 0;\r\n\r\n  /**\r\n   * Top-right positioning.\r\n   *\r\n   * @static\r\n   * @attribute TOP_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_RIGHT = 1;\r\n\r\n  /**\r\n   * Bottom-left positioning.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_LEFT = 2;\r\n\r\n  /**\r\n   * Bottom-right positioning.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_RIGHT = 3;\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n"]}