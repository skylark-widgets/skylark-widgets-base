{"version":3,"sources":["Widget.js"],"names":["define","skylark","langx","browser","datax","eventer","noder","geom","elmx","$","plugins","base","Widget","Plugin","inherit","klassName","_elmx","_construct","elm","options","isHtmlNode","this","_parse","overrided","_velm","_elm","_create","Object","defineProperty","value","state","Map","_init","optionsAttr","data","options1","JSON","parse","mixin","template","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","updates","mapping","events","attributs","properties","styles","addon","categoryName","addonName","setting","_addons","addons","category","undefined","settings","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","show","hide","focus","ex","blur","enable","set","disable","aria","name","getEl","ariaTarget","_aria","get","setAttribute","attr","velm","ret","css","prop","throb","params","attach","target","position","before","after","append","detach","remove","meta","ctor","apply","arguments","addStatePropMethod","prototype","pluginName","register","widgetName"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./base\"\r\n],function(skylark,langx,browser,datax,eventer,noder,geom,elmx,$,plugins,base){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n\tvar Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _elmx : elmx,\r\n\r\n    _construct : function(elm,options) {\r\n        if (langx.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new Map()\r\n        });\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n     },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         options = langx.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this._elmx(template);\r\n        } else {\r\n          throw new Error(\"The template is not existed in options!\");\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(categoryName,addonName,setting) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      if (setting === undefined) {\r\n        return category[addonName] || null;      \r\n      } else {\r\n        category[addonName] = setting;\r\n        return this;\r\n      }\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return langx.clone(category || null);\r\n      } else {\r\n        langx.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return noder.throb(this._elm,params);\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n\treturn base.Widget = Widget;\r\n});\r\n"]}