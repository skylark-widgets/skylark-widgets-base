{"version":3,"sources":["Widget.js"],"names":["define","skylark","types","objects","events","Vector2","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","HashMap","base","SkinManager","Widget","Plugin","inherit","klassName","_construct","parent","elm","options","element","isHtmlNode","this","_parse","isString","tagName","overrided","_velm","_elm","_create","Object","defineProperty","value","state","visible","style","position","overflow","size","location","_mode","TOP_LEFT","_init","addonCategoryOptions","addons","constructor","categoryName","i","length","addonOption","addonName","addonSetting","addonCtor","ctor","addon","setParent","optionsAttr","data","options1","eval","mixin","template","createElement","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","updateLocation","mode","undefined","TOP_RIGHT","top","y","bottom","BOTTOM_LEFT","left","x","right","updateSize","width","height","setVisibility","updateVisibility","display","updates","mapping","attributs","properties","styles","setting","_addons","settings","category","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","getSkin","get","show","hide","focus","ex","blur","enable","set","disable","name","removeClass","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","getAttr","setAttr","center","css","getStyle","setStyle","getData","setData","getParent","v","_parent","oldParent","attachTo","detach","prop","getProp","setProp","throb","params","emit","type","createEvent","Emitter","prototype","call","update","target","before","after","append","remove","preventDragEvents","setAltText","altText","document","alignItems","zIndex","border","borderRadius","color","Editor","theme","textColor","backgroundColor","barColor","borderColor","body","appendChild","text","createTextNode","destroyFunction","destroy","contains","removeChild","pointerEvents","onmousemove","event","clientX","clientY","onmouseout","setOnClick","callback","onclick","removeAllChildren","firstChild","setMode","updateInterface","updatePosition","BOTTOM_RIGHT","meta","apply","arguments","addStatePropMethod","pluginName","register","widgetName"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-langx-numerics/Vector2\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\",\r\n  \"./skins/SkinManager\"\r\n],function(skylark,types,objects,events,Vector2,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base,SkinManager){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _construct : function(parent,elm,options) {\r\n        if (parent && !(parent instanceof Widget || parent.element)) {\r\n           options = elm;\r\n           elm = parent;\r\n           parent = null;\r\n        }\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        if (types.isString(options)) {\r\n          options = {\r\n            tagName : options\r\n          };\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = this.elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        /** \r\n         * True if the element is visible.\r\n         *\r\n         * @attribute visible\r\n         * @type {Boolean}\r\n         */\r\n        this.visible = true;\r\n        \r\n\r\n        this.element.style.position = \"absolute\";\r\n        this.element.style.overflow = \"hidden\";\r\n\r\n        /**\r\n         * Size of this component in px.\r\n         *\r\n         * @attribute size\r\n         * @type {Vector2}\r\n         */\r\n        this.size = new Vector2(0, 0);\r\n        \r\n        /**\r\n         * Location of this component relatively to its parent in px.\r\n         *\r\n         * @attribute location\r\n         * @type {Vector2}\r\n         */\r\n        this.location = new Vector2(0, 0);\r\n\r\n        /**\r\n         * Locationing mode, indicates how to anchor the component.\r\n         *\r\n         * @attribute mode\r\n         * @type {Number}\r\n         */\r\n        this._mode = Widget.TOP_LEFT;\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (parent) {\r\n          this.setParent(parent);\r\n        }\r\n        //if (this._elm.parentElement) {\r\n        //  // The widget is already in document\r\n        //  this._startup();\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this.elmx(template);\r\n        } else {\r\n          var tagName = this.options.tagName;\r\n          if (tagName) {\r\n            return this.elmx(noder.createElement(tagName,{\r\n              style : {\r\n                position : \"absolute\",\r\n                overflow : \"hidden\"\r\n              }\r\n            }))\r\n          } else {\r\n            throw new Error(\"The template or tagName is not existed in options!\");\r\n          }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Update the location of this widget.\r\n     * \r\n     * @method updateLocation\r\n     */\r\n    updateLocation : function(mode) {\r\n      if(mode !== undefined) {\r\n        this._mode = mode;\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.TOP_RIGHT) {\r\n        this._elm.style.top = this.location.y + \"px\";\r\n      } else {\r\n        this._elm.style.bottom = this.location.y + \"px\";\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.BOTTOM_LEFT) {\r\n        this._elm.style.left = this.location.x + \"px\";\r\n      } else {\r\n        this._elm.style.right = this.location.x + \"px\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the size of this widget.\r\n     * \r\n     * @method updateSize\r\n     */\r\n    updateSize : function(){\r\n      this._elm.style.width = this.size.x + \"px\";\r\n      this._elm.style.height = this.size.y + \"px\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Update visibility of this element.\r\n     *\r\n     * @method setVisibility\r\n     */\r\n    setVisibility : function(visible)   {\r\n      this.visible = visible;\r\n      this.updateVisibility();\r\n    },\r\n\r\n\r\n    /**\r\n     * Update the visibility of this widget.\r\n     *\r\n     * @method updateVisibility\r\n     */\r\n    updateVisibility : function() {\r\n      this._elm.style.display = this.visible ? \"block\" : \"none\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n\r\n    getSkin : function() {\r\n      return SkinManager.get();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n\r\n    /** \r\n     * Add a CSS class to the base DOM element of this Element.\r\n     * \r\n     * @method addClass\r\n     * @param {String} name Name of the class to be added.\r\n     */\r\n    addClass : function(name){\r\n      this._velm.addClass(name);\r\n      return this;\r\n    },\r\n\r\n    /** \r\n     * Remove a CSS class from the base DOM element of this Element.\r\n     * \r\n     * @method removeClass\r\n     * @param {String} name Name of the class to be removed.\r\n     */\r\n    removeClass: function(name) {\r\n      this._velm.removeClass(name);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getAttr : function(name) {\r\n      return this._velm.attr(name);\r\n    },\r\n\r\n    setAttr : function(name,value) {\r\n      this._velm.attr(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Calculate the location of the container to make it centered.\r\n     *\r\n     * Calculated relatively to its parent size.\r\n     * \r\n     * @method center\r\n     */\r\n    center : function() {\r\n      this.location.set((this.parent.size.x - this.size.x) / 2, (this.parent.size.y - this.size.y) / 2);\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getStyle : function(name) {\r\n      return this._velm.css(name);\r\n    },\r\n\r\n    setStyle : function(name,value) {\r\n      this._velm.css(name,value);\r\n      return this;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n\r\n    getData : function(name) {\r\n      return this._velm.data(name);\r\n    },\r\n\r\n    setData : function(name,value) {\r\n      this._velm.data(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    parent : {\r\n      get : function() {\r\n        return this.getParent();\r\n      },\r\n      set : function(v) {\r\n        this.setParent(v);\r\n      }\r\n    },\r\n\r\n    getParent : function() {\r\n      return this._parent;\r\n    },\r\n\r\n    setParent : function(parent) {\r\n      var oldParent = this._parent;\r\n      this._parent = parent;\r\n      if (parent) {\r\n        this.attachTo(parent._elm || parent.element);\r\n      } else if (oldParent) {\r\n        this.detach();\r\n      }\r\n      return this;\r\n    },\r\n\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getProp : function(name) {\r\n      return this._velm.prop(name);\r\n    },\r\n\r\n    setProp : function(name,value) {\r\n      this._velm.prop(name,value);\r\n      return this;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     * Update component appearance.\r\n     * \r\n     * Should be called after changing size or location.\r\n     *\r\n     * Uses the updateVisibility and if the element is visible calls the updateSize and updateLocation (in this order) methods to update the interface.\r\n     * \r\n     * @method update\r\n     */\r\n    update : function() {\r\n      this.updateVisibility();\r\n\r\n      if(this.visible) {\r\n        this.updateSize();\r\n        this.updateLocation();\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attachTo\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attachTo : function(target,position){\r\n        var elm = target.element || target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    },\r\n\r\n    preventDragEvents : function() {\r\n\r\n    },\r\n\r\n\r\n    element : {\r\n      get : function() {\r\n        return this._elm;\r\n      },\r\n\r\n      set : function(v) {\r\n        this._elm = v;\r\n      }\r\n    },\r\n\r\n    position : {\r\n      get : function() {\r\n        return this.location;\r\n      },\r\n\r\n      set : function(v) {\r\n        this.location = v;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set alt text, that is displayed when the mouse is over the element. Returns the element created that is attached to the document body.\r\n     *\r\n     * @method setAltText\r\n     * @param {String} altText Alt text.\r\n     */\r\n    setAltText : function(altText)   {\r\n      var element = document.createElement(\"div\");\r\n      element.style.position = \"absolute\";\r\n      element.style.display = \"none\";\r\n      element.style.alignItems = \"center\";\r\n      element.style.zIndex = \"10000\";\r\n      element.style.border = \"3px solid\";\r\n      element.style.borderRadius = \"5px\";\r\n      element.style.color = Editor.theme.textColor;\r\n      element.style.backgroundColor = Editor.theme.barColor;\r\n      element.style.borderColor = Editor.theme.barColor;\r\n      element.style.height = \"fit-content\";\r\n      document.body.appendChild(element);\r\n\r\n      //Text\r\n      var text = document.createTextNode(altText);\r\n      element.appendChild(text);\r\n\r\n      //Destroy\r\n      var destroyFunction = this.destroy;\r\n      this.destroy = function()\r\n      { \r\n        destroyFunction.call(this);\r\n\r\n        if(document.body.contains(element))\r\n        {\r\n          document.body.removeChild(element);\r\n        }\r\n      };\r\n      \r\n      this._elm.style.pointerEvents = \"auto\"; \r\n\r\n      //Mouse mouse move event\r\n      this._elm.onmousemove = function(event) {\r\n        element.style.display = \"flex\";\r\n        element.style.left = (event.clientX + 8) + \"px\";\r\n        element.style.top = (event.clientY - 20) + \"px\";\r\n      };\r\n\r\n      //Mouse out event\r\n      this._elm.onmouseout = function()  {\r\n        element.style.display = \"none\";\r\n      };\r\n\r\n      return element;\r\n    },\r\n\r\n    /**\r\n     * Set method to be called on component click.\r\n     * \r\n     * @method setOnClick\r\n     * @param {Function} callback Function called when the component is clicked.\r\n     */\r\n    setOnClick : function(callback)  {\r\n      this._elm.onclick = callback;\r\n    },\r\n\r\n    /**\r\n     * Remove all DOM children from the element.\r\n     * \r\n     * @method removeAllChildren\r\n     */\r\n    removeAllChildren : function()   {\r\n      while(this._elm.firstChild) {\r\n        this._elm.removeChild(this._elm.firstChild);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set positioning mode.\r\n     * \r\n     * @method setMode\r\n     * @param {Number} setMode\r\n     */\r\n    setMode : function(mode) {\r\n      this._mode = mode;\r\n      this._elm.style.bottom = null;\r\n      this._elm.style.right = null;\r\n      this._elm.style.left = null;\r\n    }\r\n\r\n  });\r\n\r\n  Widget.prototype.updateInterface = Widget.prototype.update;\r\n  Widget.prototype.updatePosition = Widget.prototype.updateLocation;\r\n  //Widget.prototype.attachTo = Widget.prototype.attach;\r\n\r\n  /**\r\n   * Top-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_LEFT = 0;\r\n\r\n  /**\r\n   * Top-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_RIGHT = 1;\r\n\r\n  /**\r\n   * Bottom-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_LEFT = 2;\r\n\r\n  /**\r\n   * Bottom-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_RIGHT = 3;\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n"]}