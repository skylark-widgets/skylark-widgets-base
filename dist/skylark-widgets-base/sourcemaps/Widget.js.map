{"version":3,"sources":["Widget.js"],"names":["define","skylark","types","objects","events","Vector2","browser","datax","eventer","noder","files","geom","elmx","$","fx","plugins","HashMap","base","SkinManager","Widget","Plugin","inherit","klassName","_construct","parent","elm","options","isHtmlNode","this","_parse","isString","tagName","overrided","_velm","_elm","_create","Object","defineProperty","value","state","visible","size","location","_mode","TOP_LEFT","_init","addonCategoryOptions","addons","constructor","categoryName","i","length","addonOption","addonName","addonSetting","addonCtor","ctor","addon","optionsAttr","data","options1","eval","mixin","template","createElement","style","position","overflow","Error","self","widgetClass","addClass","on","e","args","_refresh","_startup","_updateLocation","mode","undefined","TOP_RIGHT","top","y","bottom","BOTTOM_LEFT","left","x","right","updateSize","width","height","updateVisibility","display","updates","mapping","attributs","properties","styles","setting","_addons","settings","category","clone","render","getEnclosing","selector","getEnclosed","children","ArrayList","getSkin","get","show","hide","focus","ex","blur","enable","set","disable","name","removeClass","aria","getEl","ariaTarget","_aria","setAttribute","attr","velm","ret","getAttr","setAttr","center","css","getStyle","setStyle","getData","setData","_parent","attach","getParent","setParent","prop","getProp","setProp","throb","params","emit","type","createEvent","Emitter","prototype","call","update","_updateVisibility","_updateSize","target","before","after","append","detach","remove","BOTTOM_RIGHT","meta","apply","arguments","addStatePropMethod","pluginName","register","widgetName"],"mappings":"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","file":"../Widget.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-langx-numerics/Vector2\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-files\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-fx\",\r\n  \"skylark-domx-plugins\",\r\n  \"skylark-data-collection/HashMap\",\r\n  \"./base\",\r\n  \"./SkinManager\"\r\n],function(skylark,types,objects,events,Vector2,browser,datax,eventer,noder,files,geom,elmx,$,fx, plugins,HashMap,base,SkinManager){\r\n\r\n/*---------------------------------------------------------------------------------*/\r\n\r\n  var Widget = plugins.Plugin.inherit({\r\n    klassName: \"Widget\",\r\n\r\n    _construct : function(parent,elm,options) {\r\n        if (parent && !(parent instanceof Widget)) {\r\n           options = elm;\r\n           elm = parent;\r\n           parent = null;\r\n        }\r\n        if (types.isHtmlNode(elm)) {\r\n          options = this._parse(elm,options);\r\n        } else {\r\n          options = elm;\r\n          elm = null;\r\n        }\r\n        if (types.isString(options)) {\r\n          options = {\r\n            tagName : options\r\n          };\r\n        }\r\n        this.overrided(elm,options);\r\n\r\n        if (!elm) {\r\n          this._velm = this._create();\r\n          this._elm = this._velm.elm();\r\n        } else {\r\n          this._velm = this.elmx(this._elm);\r\n        }\r\n        \r\n        Object.defineProperty(this,\"state\",{\r\n          value :this.options.state || new HashMap()\r\n        });\r\n\r\n        /** \r\n         * True if the element is visible.\r\n         *\r\n         * @attribute visible\r\n         * @type {Boolean}\r\n         */\r\n        this.visible = true;\r\n        \r\n        /**\r\n         * Size of this component in px.\r\n         *\r\n         * @attribute size\r\n         * @type {Vector2}\r\n         */\r\n        this.size = new Vector2(0, 0);\r\n        \r\n        /**\r\n         * Location of this component relatively to its parent in px.\r\n         *\r\n         * @attribute location\r\n         * @type {Vector2}\r\n         */\r\n        this.location = new Vector2(0, 0);\r\n\r\n        /**\r\n         * Locationing mode, indicates how to anchor the component.\r\n         *\r\n         * @attribute mode\r\n         * @type {Number}\r\n         */\r\n        this._mode = Widget.TOP_LEFT;\r\n\r\n        //this.state = this.options.state || new Map();\r\n        this._init();\r\n\r\n        var addonCategoryOptions = this.options.addons;\r\n        if (addonCategoryOptions) {\r\n          var widgetCtor = this.constructor,\r\n              addons = widgetCtor.addons;\r\n          for (var categoryName in addonCategoryOptions) {\r\n              for (var i =0;i < addonCategoryOptions[categoryName].length; i++ ) {\r\n                var addonOption = addonCategoryOptions[categoryName][i];\r\n                if (types.isString(addonOption)) {\r\n                  var addonName = addonOption,\r\n                      addonSetting = addons[categoryName][addonName],\r\n                      addonCtor = addonSetting.ctor ? addonSetting.ctor : addonSetting;\r\n\r\n                  this.addon(addonCtor,addonSetting.options);\r\n\r\n                }\r\n\r\n              }\r\n          }\r\n        }\r\n\r\n        if (parent) {\r\n          this.parent(parent);\r\n        }\r\n        //if (this._elm.parentElement) {\r\n        //  // The widget is already in document\r\n        //  this._startup();\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Parses widget options from attached element.\r\n     * This is a callback method called by constructor when attached element is specified.\r\n     * @method _parse\r\n     * @return {Object} options.\r\n     */\r\n    _parse : function(elm,options) {\r\n      var optionsAttr = datax.data(elm,\"options\");\r\n      if (optionsAttr) {\r\n         //var options1 = JSON.parse(\"{\" + optionsAttr + \"}\");\r\n         var options1 = eval(\"({\" + optionsAttr + \"})\");\r\n         options = objects.mixin(options1,options); \r\n      }\r\n      return options || {};\r\n    },\r\n\r\n    /**\r\n     * Create html element for this widget.\r\n     * This is a callback method called by constructor when attached element is not specified.\r\n     * @method _create\r\n     */\r\n    _create : function() {\r\n        var template = this.options.template;\r\n        if (template) {\r\n          return this.elmx(template);\r\n        } else {\r\n          var tagName = this.options.tagName;\r\n          if (tagName) {\r\n            return this.elmx(noder.createElement(tagName,{\r\n              style : {\r\n                position : \"absolute\",\r\n                overflow : \"hidden\"\r\n              }\r\n            }))\r\n          } else {\r\n            throw new Error(\"The template or tagName is not existed in options!\");\r\n          }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Init widget.\r\n     * This is a callback method called by constructor.\r\n     * @method _init\r\n     */\r\n    _init : function() {\r\n      var self = this;\r\n      if (this.widgetClass) {\r\n        this._velm.addClass(this.widgetClass);\r\n      }\r\n      this.state.on(\"changed\",function(e,args) {\r\n        self._refresh(args.data);\r\n      });\r\n    },\r\n\r\n\r\n    /**\r\n     * Startup widget.\r\n     * This is a callback method called when widget element is added into dom.\r\n     * @method _post\r\n     */\r\n    _startup : function() {\r\n\r\n    },\r\n\r\n    /**\r\n     * Update the location of this widget.\r\n     * \r\n     * @method updateLocation\r\n     */\r\n    _updateLocation : function(mode) {\r\n      if(mode !== undefined) {\r\n        this._mode = mode;\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.TOP_RIGHT) {\r\n        this._elm.style.top = this.location.y + \"px\";\r\n      } else {\r\n        this._elm.style.bottom = this.location.y + \"px\";\r\n      }\r\n\r\n      if(this._mode === Widget.TOP_LEFT || this._mode === Widget.BOTTOM_LEFT) {\r\n        this._elm.style.left = this.location.x + \"px\";\r\n      } else {\r\n        this._elm.style.right = this.location.x + \"px\";\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the size of this widget.\r\n     * \r\n     * @method updateSize\r\n     */\r\n    updateSize : function(){\r\n      this._elm.style.width = this.size.x + \"px\";\r\n      this._elm.style.height = this.size.y + \"px\";\r\n    },\r\n\r\n    /**\r\n     * Update the visibility of this widget.\r\n     *\r\n     * @method updateVisibility\r\n     */\r\n    updateVisibility : function() {\r\n      this._elm.style.display = this.visible ? \"block\" : \"none\";\r\n    },\r\n\r\n\r\n    /**\r\n     * Refresh widget.\r\n     * This is a callback method called when widget state is changed.\r\n     * @method _refresh\r\n     */\r\n    _refresh : function(updates) {\r\n      /*\r\n      var _ = this._,\r\n          model = _.model,\r\n          dom = _.dom,\r\n          props = {\r\n\r\n          };\r\n      updates = updates || {};\r\n      for (var attrName in updates){\r\n          var v = updates[attrName].value;\r\n          if (v && v.toCss) {\r\n              v.toCss(props);\r\n              updates[attrName].processed = true;\r\n          }\r\n\r\n      };\r\n\r\n      this.css(props);\r\n\r\n      if (updates[\"disabled\"]) {\r\n          var v = updates[\"disabled\"].value;\r\n          dom.aria('disabled', v);\r\n          self.classes.toggle('disabled', v);\r\n      }\r\n      */\r\n    },                \r\n\r\n    mapping : {\r\n      \"events\" : {\r\n  //       'mousedown .title':  'edit',\r\n  //       'click .button':     'save',\r\n  //       'click .open':       function(e) { ... }            \r\n      },\r\n\r\n      \"attributs\" : {\r\n\r\n      },\r\n\r\n      \"properties\" : {\r\n\r\n      },\r\n\r\n      \"styles\" : {\r\n\r\n      }\r\n    },\r\n\r\n    addon : function(ctor,setting) {\r\n      var categoryName = ctor.categoryName,\r\n          addonName = ctor.addonName;\r\n\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n      category[addonName] = new ctor(this,setting);\r\n      return this;\r\n    },\r\n\r\n    addons : function(categoryName,settings) {\r\n      this._addons = this.addons || {};\r\n      var category = this._addons[categoryName] = this._addons[categoryName] || {};\r\n\r\n      if (settings == undefined) {\r\n        return objects.clone(category || null);\r\n      } else {\r\n        objects.mixin(category,settings);\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * Returns a html element representing the widget.\r\n     *\r\n     * @method render\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    render: function() {\r\n      return this._elm;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * Returns a parent widget  enclosing this widgets, or null if not exist.\r\n     *\r\n     * @method getEnclosing\r\n     * @return {Widget} The enclosing parent widget, or null if not exist.\r\n     */\r\n    getEnclosing : function(selector) {\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns a widget collection with all enclosed child widgets.\r\n     *\r\n     * @method getEnclosed\r\n     * @return {List} Collection with all enclosed child widgets..\r\n     */\r\n    getEnclosed : function() {\r\n      var self = this;\r\n          children = new ArrayList();\r\n      return children;\r\n    },\r\n\r\n\r\n    getSkin : function() {\r\n      return SkinManager.get();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to true.\r\n     *\r\n     * @method show\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n\r\n    show : function() {\r\n      this._velm.show();\r\n    },\r\n\r\n    /**\r\n     * Sets the visible state to false.\r\n     *\r\n     * @method hide\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    hide : function() {\r\n      this._velm.hide();\r\n    },\r\n\r\n    /**\r\n     * Focuses the current widget.\r\n     *\r\n     * @method focus\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    focus :function() {\r\n      try {\r\n        this._velm.focus();\r\n      } catch (ex) {\r\n        // Ignore IE error\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Blurs the current widget.\r\n     *\r\n     * @method blur\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    blur : function() {\r\n      this._velm.blur();\r\n\r\n      return this;\r\n    },\r\n\r\n    enable: function () {\r\n      this.state.set('disabled',false);\r\n      return this;\r\n    },\r\n\r\n    disable: function () {\r\n      this.state.set('disabled',true);\r\n      return this;\r\n    },\r\n\r\n\r\n    /** \r\n     * Add a CSS class to the base DOM element of this Element.\r\n     * \r\n     * @method addClass\r\n     * @param {String} name Name of the class to be added.\r\n     */\r\n    addClass : function(name){\r\n      this._velm.addClass(name);\r\n      return this;\r\n    },\r\n\r\n    /** \r\n     * Remove a CSS class from the base DOM element of this Element.\r\n     * \r\n     * @method removeClass\r\n     * @param {String} name Name of the class to be removed.\r\n     */\r\n    removeClass: function(name) {\r\n      this._velm.removeClass(name);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the specified aria property.\r\n     *\r\n     * @method aria\r\n     * @param {String} name Name of the aria property to set.\r\n     * @param {String} value Value of the aria property.\r\n     * @return {Widget} Current widget instance.\r\n     */\r\n    aria : function(name, value) {\r\n      const self = this, elm = self.getEl(self.ariaTarget);\r\n\r\n      if (typeof value === 'undefined') {\r\n        return self._aria[name];\r\n      }\r\n\r\n      self._aria[name] = value;\r\n\r\n      if (self.state.get('rendered')) {\r\n        elm.setAttribute(name === 'role' ? name : 'aria-' + name, value);\r\n      }\r\n\r\n      return self;\r\n    },\r\n\r\n    attr: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.attr(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getAttr : function(name) {\r\n      return this._velm.attr(name);\r\n    },\r\n\r\n    setAttr : function(name,value) {\r\n      this._velm.attr(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Calculate the location of the container to make it centered.\r\n     *\r\n     * Calculated relatively to its parent size.\r\n     * \r\n     * @method center\r\n     */\r\n    center : function() {\r\n      this.location.set((this.parent.size.x - this.size.x) / 2, (this.parent.size.y - this.size.y) / 2);\r\n    },\r\n\r\n    css: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.css(name, value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getStyle : function(name) {\r\n      return this._velm.css(name);\r\n    },\r\n\r\n    setStyle : function(name,value) {\r\n      this._velm.css(name,value);\r\n      return this;\r\n    },\r\n\r\n    data: function (name, value) {\r\n        var velm = this._velm,\r\n            ret = velm.data(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n\r\n    getData : function(name) {\r\n      return this._velm.data(name);\r\n    },\r\n\r\n    setData : function(name,value) {\r\n      this._velm.data(name,value);\r\n      return this;\r\n    },\r\n\r\n\r\n    parent : function(parent) {\r\n      if (parent) {\r\n        this._parent = parent;\r\n        this.attach(parent._elm);\r\n      } else {\r\n        return this._parent;\r\n      }\r\n    },\r\n\r\n    getParent : function() {\r\n      return this._parent;\r\n    },\r\n\r\n    setParent : function(parent) {\r\n      this._parent = parent;\r\n      this.attach(parent._elm);\r\n      return this;\r\n    },\r\n\r\n\r\n    prop: function (name,value) {\r\n        var velm = this._velm,\r\n            ret = velm.prop(name,value);\r\n        return ret == velm ? this : ret;\r\n    },\r\n\r\n    getProp : function(name) {\r\n      return this._velm.prop(name);\r\n    },\r\n\r\n    setProp : function(name,value) {\r\n      this._velm.prop(name,value);\r\n      return this;\r\n    },\r\n\r\n    throb: function(params) {\r\n      return fx.throb(this._elm,params);\r\n    },\r\n\r\n    emit : function(type,params) {\r\n      var e = events.createEvent(type,{\r\n        data : params\r\n      });\r\n      return events.Emitter.prototype.emit.call(this,e,params);\r\n    },\r\n\r\n    /**\r\n     * Update component appearance.\r\n     * \r\n     * Should be called after changing size or location.\r\n     *\r\n     * Uses the updateVisibility and if the element is visible calls the updateSize and updateLocation (in this order) methods to update the interface.\r\n     * \r\n     * @method update\r\n     */\r\n    update : function() {\r\n      this._updateVisibility();\r\n\r\n      if(this.visible) {\r\n        this._updateSize();\r\n        this._updateLocation();\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     *  Attach the current widget element to dom document.\r\n     *\r\n     * @method attach\r\n     * @return {Widget} This Widget.\r\n     */\r\n    attach : function(target,position){\r\n        var elm = target;\r\n        if (!position || position==\"child\") {\r\n            noder.append(elm,this._elm);\r\n        } else  if (position == \"before\") {\r\n            noder.before(elm,this._elm);\r\n        } else if (position == \"after\") {\r\n            noder.after(elm,this._elm);\r\n        }\r\n        this._startup();\r\n    },\r\n\r\n    /**\r\n     *  Detach the current widget element from dom document.\r\n     *\r\n     * @method html\r\n     * @return {HtmlElement} HTML element representing the widget.\r\n     */\r\n    detach : function() {\r\n      this._velm.remove();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Top-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_LEFT = 0;\r\n\r\n  /**\r\n   * Top-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute TOP_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.TOP_RIGHT = 1;\r\n\r\n  /**\r\n   * Bottom-left locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_LEFT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_LEFT = 2;\r\n\r\n  /**\r\n   * Bottom-right locationing.\r\n   *\r\n   * @static\r\n   * @attribute BOTTOM_RIGHT\r\n   * @type {Number}\r\n   */\r\n  Widget.BOTTOM_RIGHT = 3;\r\n\r\n  Widget.inherit = function(meta) {\r\n    var ctor = plugins.Plugin.inherit.apply(this,arguments);\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (meta.pluginName) {\r\n      plugins.register(ctor,meta.pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  Widget.register = function(ctor,widgetName) {\r\n    var meta = ctor.prototype,\r\n        pluginName = widgetName || meta.pluginName;\r\n\r\n    function addStatePropMethod(name) {\r\n        ctor.prototype[name] = function(value) {\r\n          if (value !== undefined) {\r\n            this.state.set(name,value);\r\n            return this;\r\n          } else {\r\n            return this.state.get(name);\r\n          }\r\n        };\r\n    }\r\n    if (meta.state) {\r\n      for (var name in meta.state) {\r\n          addStatePropMethod(name);\r\n      }\r\n    }\r\n\r\n    if (pluginName) {\r\n      plugins.register(ctor,pluginName);\r\n    }\r\n    return ctor;\r\n  };\r\n\r\n  return base.Widget = Widget;\r\n});\r\n"]}